<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="zh">
  <compounddef id="pcb_8c" kind="file" language="C++">
    <compoundname>pcb.c</compoundname>
    <includes refid="atomic_8h" local="no">asm/atomic.h</includes>
    <includes refid="pgtable_8h" local="no">asm/pgtable.h</includes>
    <includes refid="stack_8h" local="no">asm/stack.h</includes>
    <includes refid="elf_8h" local="no">common/elf.h</includes>
    <includes refid="screen_8h" local="no">drivers/screen/screen.h</includes>
    <includes refid="fs_8h" local="no">fs/fs.h</includes>
    <includes refid="math_8h" local="no">lib/math.h</includes>
    <includes refid="stdio_8h" local="no">lib/stdio.h</includes>
    <includes refid="string_8h" local="no">lib/string.h</includes>
    <includes refid="irq_8h" local="no">os/irq.h</includes>
    <includes refid="pcb_8h" local="no">os/pcb.h</includes>
    <includes refid="smp_8h" local="no">os/smp.h</includes>
    <includes local="no">user/user_programs.h</includes>
    <incdepgraph>
      <node id="20">
        <label>fs/fs.h</label>
        <link refid="fs_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>asm/pgtable.h</label>
        <link refid="pgtable_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>os/mm.h</label>
        <link refid="mm_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>drivers/screen/screen.h</label>
        <link refid="screen_8h"/>
      </node>
      <node id="22">
        <label>lib/stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>common/elf.h</label>
        <link refid="elf_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>common/errno.h</label>
        <link refid="errno_8h"/>
      </node>
      <node id="1">
        <label>src/kernel/sys/pcb.c</label>
        <link refid="pcb_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>os/cpu.h</label>
        <link refid="cpu_8h"/>
      </node>
      <node id="18">
        <label>os/time.h</label>
        <link refid="time_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>asm/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>asm/context.h</label>
        <link refid="context_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>lib/math.h</label>
        <link refid="math_8h"/>
      </node>
      <node id="24">
        <label>os/irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>asm/sbidef.h</label>
        <link refid="sbidef_8h"/>
      </node>
      <node id="3">
        <label>common/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>os/smp.h</label>
        <link refid="smp_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>asm/stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>lib/string.h</label>
        <link refid="string_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>asm/sbi.h</label>
        <link refid="sbi_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>os/pcb.h</label>
        <link refid="pcb_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>user/user_programs.h</label>
      </node>
      <node id="15">
        <label>os/lock.h</label>
        <link refid="lock_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>lib/stdarg.h</label>
        <link refid="stdarg_8h"/>
      </node>
      <node id="17">
        <label>os/sync.h</label>
        <link refid="sync_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>lib/list.h</label>
        <link refid="list_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="pcb_8c_1a83f38b8c9da23021ed61d4031ab5aad3" prot="public" static="no" mutable="no">
        <type><ref refid="pcb_8h_1a3c0f153d2844c3c3248a1795b159ae37" kindref="member">pcb_t</ref> *volatile</type>
        <definition>pcb_t* volatile current_running0</definition>
        <argsstring></argsstring>
        <name>current_running0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="15" column="16" bodyfile="src/kernel/sys/pcb.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pcb_8c_1a5f57f427e7da8049da09de558fc72e2d" prot="public" static="no" mutable="no">
        <type><ref refid="pcb_8h_1a3c0f153d2844c3c3248a1795b159ae37" kindref="member">pcb_t</ref> *volatile</type>
        <definition>pcb_t* volatile current_running1</definition>
        <argsstring></argsstring>
        <name>current_running1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="16" column="16" bodyfile="src/kernel/sys/pcb.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pcb_8c_1a775dd48cd2188c627cbdd19b03b37212" prot="public" static="no" mutable="no">
        <type><ref refid="pcb_8h_1a3c0f153d2844c3c3248a1795b159ae37" kindref="member">pcb_t</ref> *volatile *volatile</type>
        <definition>pcb_t* volatile* volatile current_running</definition>
        <argsstring></argsstring>
        <name>current_running</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="17" column="25" bodyfile="src/kernel/sys/pcb.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pcb_8c_1ae51cf8adc1996b94136d81150db7f4ea" prot="public" static="no" mutable="no">
        <type><ref refid="pcb_8h_1a3c0f153d2844c3c3248a1795b159ae37" kindref="member">pcb_t</ref></type>
        <definition>pcb_t pcb[NUM_MAX_TASK]</definition>
        <argsstring>[NUM_MAX_TASK]</argsstring>
        <name>pcb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="22" column="7" bodyfile="src/kernel/sys/pcb.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pcb_8c_1ad0430733a8767855b580810743c5fb87" prot="public" static="no" mutable="no">
        <type>const <ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref></type>
        <definition>const ptr_t pid0_stack</definition>
        <argsstring></argsstring>
        <name>pid0_stack</name>
        <initializer>= <ref refid="mm_8h_1aef6d6f3957e639df5120d01892abe782" kindref="member">INIT_KERNEL_STACK</ref> + <ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref> * 3 - 112 - 288</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="24" column="13" bodyfile="src/kernel/sys/pcb.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pcb_8c_1a2480c4e3f86ff7b2575b89ef69e97355" prot="public" static="no" mutable="no">
        <type>const <ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref></type>
        <definition>const ptr_t pid0_stack2</definition>
        <argsstring></argsstring>
        <name>pid0_stack2</name>
        <initializer>= <ref refid="mm_8h_1aef6d6f3957e639df5120d01892abe782" kindref="member">INIT_KERNEL_STACK</ref> + <ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref> * 5 - 112 - 288</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="25" column="13" bodyfile="src/kernel/sys/pcb.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pcb_8c_1aaefceaf10125be70ceac97d46a4f2bc3" prot="public" static="no" mutable="no">
        <type><ref refid="pcb_8h_1a3c0f153d2844c3c3248a1795b159ae37" kindref="member">pcb_t</ref></type>
        <definition>pcb_t pid0_pcb</definition>
        <argsstring></argsstring>
        <name>pid0_pcb</name>
        <initializer>= {.pid = -1, .kernel_sp = (<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref>)<ref refid="pcb_8c_1ad0430733a8767855b580810743c5fb87" kindref="member">pid0_stack</ref>, .user_sp = (<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref>)(<ref refid="mm_8h_1aef6d6f3957e639df5120d01892abe782" kindref="member">INIT_KERNEL_STACK</ref> + <ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref> * 2), .core_mask[0] = 0x3, .status = <ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba64d5f8a2cf37ebdf772858331e82a54a" kindref="member">TASK_EXITED</ref>}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="26" column="7" bodyfile="src/kernel/sys/pcb.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pcb_8c_1a8176d551abe4fa60c56659184e032ab0" prot="public" static="no" mutable="no">
        <type><ref refid="pcb_8h_1a3c0f153d2844c3c3248a1795b159ae37" kindref="member">pcb_t</ref></type>
        <definition>pcb_t pid0_pcb2</definition>
        <argsstring></argsstring>
        <name>pid0_pcb2</name>
        <initializer>= {.pid = -1, .kernel_sp = (<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref>)<ref refid="pcb_8c_1a2480c4e3f86ff7b2575b89ef69e97355" kindref="member">pid0_stack2</ref>, .user_sp = (<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref>)(<ref refid="mm_8h_1aef6d6f3957e639df5120d01892abe782" kindref="member">INIT_KERNEL_STACK</ref> + <ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref> * 4), .core_mask[0] = 0x3, .status = <ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba64d5f8a2cf37ebdf772858331e82a54a" kindref="member">TASK_EXITED</ref>}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="27" column="7" bodyfile="src/kernel/sys/pcb.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pcb_8c_1a86b2aece801dbd55da125691aa8b73a7" prot="public" static="no" mutable="no">
        <type><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref></type>
        <definition>pid_t freepid[NUM_MAX_TASK]</definition>
        <argsstring>[NUM_MAX_TASK]</argsstring>
        <name>freepid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="29" column="7" bodyfile="src/kernel/sys/pcb.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pcb_8c_1ab2792d5af8238e6563b665550c4c1c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LIST_HEAD</definition>
        <argsstring>(ready_queue)</argsstring>
        <name>LIST_HEAD</name>
        <param>
          <type><ref refid="pcb_8h_1a58658ee7ac1edae4ef80e87071be6b3d" kindref="member">ready_queue</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="19" column="1" declfile="src/kernel/sys/pcb.c" declline="19" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1ae6ffe0bd372bfa7221bcb34e56eee9a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LIST_HEAD</definition>
        <argsstring>(block_queue)</argsstring>
        <name>LIST_HEAD</name>
        <param>
          <type><ref refid="pcb_8h_1a2faf8a6ddc84222929f0f6ef1a192537" kindref="member">block_queue</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="20" column="1" declfile="src/kernel/sys/pcb.c" declline="20" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1aa270cdccfc324df6feafe55e26b74a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref></type>
        <definition>pid_t nextpid</definition>
        <argsstring>()</argsstring>
        <name>nextpid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="31" column="7" bodyfile="src/kernel/sys/pcb.c" bodystart="31" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a37c23b4e8693e6faad0735841ab5f529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_pcb_i</definition>
        <argsstring>(char *name, int pcb_i, task_type_t type, int pid, int fpid, int tid, int father_pid, uint8_t core_mask)</argsstring>
        <name>init_pcb_i</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pcb_i</declname>
        </param>
        <param>
          <type><ref refid="pcb_8h_1a02c2160f4d52670dcb8fdd49f0a5ffee" kindref="member">task_type_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fpid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>father_pid</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>core_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="42" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="42" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1af74e7a9700d18dd99ffa77cd66f87646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref></type>
        <definition>uintptr_t init_user_stack</definition>
        <argsstring>(ptr_t *user_stack_kva, ptr_t *user_stack, int argc, const char *argv[], int envpc, const char *envp[], const char *file_name)</argsstring>
        <name>init_user_stack</name>
        <param>
          <type><ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref> *</type>
          <declname>user_stack_kva</declname>
        </param>
        <param>
          <type><ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref> *</type>
          <declname>user_stack</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>envpc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>envp</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="73" column="11" bodyfile="src/kernel/sys/pcb.c" bodystart="73" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1af570f8c236ff40f11e384cbe069b87b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_pcb_init</definition>
        <argsstring>()</argsstring>
        <name>k_pcb_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="123" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="123" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a37c9544a2403eb490c70ddb6d9126030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long sys_setpriority</definition>
        <argsstring>(int which, int who, int niceval)</argsstring>
        <name>sys_setpriority</name>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <param>
          <type>int</type>
          <declname>who</declname>
        </param>
        <param>
          <type>int</type>
          <declname>niceval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="135" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="135" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a762a6d6fd8537d9842e21faa0972abb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long sys_getpriority</definition>
        <argsstring>(int which, int who)</argsstring>
        <name>sys_getpriority</name>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <param>
          <type>int</type>
          <declname>who</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="164" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="164" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1adc5cb8b600d43cff753d826be3d9ac5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t cal_priority</definition>
        <argsstring>(uint64_t cur_time, uint64_t idle_time, long priority)</argsstring>
        <name>cal_priority</name>
        <param>
          <type>uint64_t</type>
          <declname>cur_time</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>idle_time</declname>
        </param>
        <param>
          <type>long</type>
          <declname>priority</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="168" column="10" bodyfile="src/kernel/sys/pcb.c" bodystart="168" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a4f9bf7d87efec667962613ca3835c93d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pcb_8h_1a3c0f153d2844c3c3248a1795b159ae37" kindref="member">pcb_t</ref> *</type>
        <definition>pcb_t* check_first_ready_task</definition>
        <argsstring>()</argsstring>
        <name>check_first_ready_task</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="178" column="7" bodyfile="src/kernel/sys/pcb.c" bodystart="178" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1ad01e6c074e73456d8b6384875915ae1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pcb_8h_1a3c0f153d2844c3c3248a1795b159ae37" kindref="member">pcb_t</ref> *</type>
        <definition>pcb_t* choose_sched_task</definition>
        <argsstring>(list_head *queue)</argsstring>
        <name>choose_sched_task</name>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="191" column="7" bodyfile="src/kernel/sys/pcb.c" bodystart="191" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1abeffcafe26085a09b2ca3986ed288125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enqueue</definition>
        <argsstring>(list_head *new, list_head *head, enqueue_way_t way)</argsstring>
        <name>enqueue</name>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>new</declname>
        </param>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>head</declname>
        </param>
        <param>
          <type><ref refid="pcb_8h_1a01980b8e156378d98867d30058688333" kindref="member">enqueue_way_t</ref></type>
          <declname>way</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="215" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="215" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a51cfeafc411596ee2a2da62e80551c17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pcb_8h_1a3c0f153d2844c3c3248a1795b159ae37" kindref="member">pcb_t</ref> *</type>
        <definition>pcb_t* dequeue</definition>
        <argsstring>(list_head *queue, dequeue_way_t target)</argsstring>
        <name>dequeue</name>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type><ref refid="pcb_8h_1a3b03c501b04f29e13e344d0b3514cfc5" kindref="member">dequeue_way_t</ref></type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="238" column="7" bodyfile="src/kernel/sys/pcb.c" bodystart="238" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a85b5fc5efbbb65668438fecad67c06e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long sys_nanosleep</definition>
        <argsstring>(nanotime_val_t *rqtp, nanotime_val_t *rmtp)</argsstring>
        <name>sys_nanosleep</name>
        <param>
          <type><ref refid="time_8h_1a093648f8a2bb94f4426f2dcc6af104f8" kindref="member">nanotime_val_t</ref> *</type>
          <declname>rqtp</declname>
        </param>
        <param>
          <type><ref refid="time_8h_1a093648f8a2bb94f4426f2dcc6af104f8" kindref="member">nanotime_val_t</ref> *</type>
          <declname>rmtp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="263" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="263" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1ac61a87c664aa7443794d1d2cd3f07e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void check_sleeping</definition>
        <argsstring>()</argsstring>
        <name>check_sleeping</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="273" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="273" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1ab235dcbe70f00d25d99f6d0bce4ec087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long k_pcb_scheduler</definition>
        <argsstring>(void)</argsstring>
        <name>k_pcb_scheduler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="290" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="290" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1aa38a6ba4849edd0e34a225dbb2975f94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long sys_sched_yield</definition>
        <argsstring>(void)</argsstring>
        <name>sys_sched_yield</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="316" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="316" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a46a988dfd7b1038c6ba7f97ec2a7c4f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_pcb_block</definition>
        <argsstring>(list_node_t *pcb_node, list_head *queue, enqueue_way_t way)</argsstring>
        <name>k_pcb_block</name>
        <param>
          <type><ref refid="list_8h_1a865bd3b3cd44b1d8f1d63746748fa807" kindref="member">list_node_t</ref> *</type>
          <declname>pcb_node</declname>
        </param>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type><ref refid="pcb_8h_1a01980b8e156378d98867d30058688333" kindref="member">enqueue_way_t</ref></type>
          <declname>way</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="320" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a3534b2b27aeed25d68791f153d794810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_pcb_unblock</definition>
        <argsstring>(list_head *from_queue, list_head *to_queue, unblock_way_t way)</argsstring>
        <name>k_pcb_unblock</name>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>from_queue</declname>
        </param>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>to_queue</declname>
        </param>
        <param>
          <type><ref refid="pcb_8h_1a44d797e82ea4cda687ee34355a189481" kindref="member">unblock_way_t</ref></type>
          <declname>way</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="325" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="325" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1af740734e52630b6e24832a2dbc099398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long sys_sched_setaffinity</definition>
        <argsstring>(pid_t pid, unsigned int len, const byte_size_t *user_mask_ptr)</argsstring>
        <name>sys_sched_setaffinity</name>
        <param>
          <type><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const <ref refid="types_8h_1ac476a80395b2321c72363bbe7c139ff9" kindref="member">byte_size_t</ref> *</type>
          <declname>user_mask_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="350" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="350" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a172a2eb43df307e23df85372199a4cda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long sys_sched_getaffinity</definition>
        <argsstring>(pid_t pid, unsigned int len, uint8_t *user_mask_ptr)</argsstring>
        <name>sys_sched_getaffinity</name>
        <param>
          <type><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>user_mask_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="364" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="364" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1aa5c807043b9713e4e2f3037422c8c609" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long spawn</definition>
        <argsstring>(const char *file_name)</argsstring>
        <name>spawn</name>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="378" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="378" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a5a2119b4304437c4e3aff0e8c7484b1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long sys_spawn</definition>
        <argsstring>(const char *file_name)</argsstring>
        <name>sys_spawn</name>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="404" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="404" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a3dc0f40e7f1307efe0efe5abc6d551b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long sys_fork</definition>
        <argsstring>()</argsstring>
        <name>sys_fork</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="412" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="412" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1aa8bc378bc7bc365ecccceb9809105f89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int kill</definition>
        <argsstring>(pid_t pid, int exit_status)</argsstring>
        <name>kill</name>
        <param>
          <type><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>exit_status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="442" column="5" bodyfile="src/kernel/sys/pcb.c" bodystart="442" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1ab6bb3d2baf7ab70bf6e832bba98c5e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long sys_kill</definition>
        <argsstring>(pid_t pid)</argsstring>
        <name>sys_kill</name>
        <param>
          <type><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref></type>
          <declname>pid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="479" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="479" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1aa97ee001038378e557b20535e2347aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long sys_exit</definition>
        <argsstring>(int error_code)</argsstring>
        <name>sys_exit</name>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="491" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="491" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a5ac8dc14c787aa11829c507e87c9b908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long sys_wait4</definition>
        <argsstring>(pid_t pid, int *stat_addr, int options, rusage_t *ru)</argsstring>
        <name>sys_wait4</name>
        <param>
          <type><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>stat_addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>options</declname>
        </param>
        <param>
          <type><ref refid="pcb_8h_1a0027cfcb9634c5c6b7e635485f97e249" kindref="member">rusage_t</ref> *</type>
          <declname>ru</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="508" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="508" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a70451e498144bba3b0eda268e137e3e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long sys_process_show</definition>
        <argsstring>()</argsstring>
        <name>sys_process_show</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="550" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="550" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a48df026a75ef8566304e110b6d17c97a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long exec</definition>
        <argsstring>(int target_pid, int father_pid, const char *file_name, const char *argv[], const char *envp[])</argsstring>
        <name>exec</name>
        <param>
          <type>int</type>
          <declname>target_pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>father_pid</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const char *</type>
          <declname>envp</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="604" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="604" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a6f26d791d6f69063f9ea40becd52e9f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long sys_exec</definition>
        <argsstring>(const char *file_name, const char *argv[], const char *envp[])</argsstring>
        <name>sys_exec</name>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const char *</type>
          <declname>envp</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="634" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="634" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1ae34299981375e7a3b8f691b4137a8213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long sys_execve</definition>
        <argsstring>(const char *file_name, const char *argv[], const char *envp[])</argsstring>
        <name>sys_execve</name>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const char *</type>
          <declname>envp</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="638" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="638" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a6edad7da8809383ab626e5de7e3215a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long clone</definition>
        <argsstring>(unsigned long flags, void *stack, pid_t *parent_tid, void *tls, pid_t *child_tid)</argsstring>
        <name>clone</name>
        <param>
          <type>unsigned long</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref> *</type>
          <declname>parent_tid</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>tls</declname>
        </param>
        <param>
          <type><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref> *</type>
          <declname>child_tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="647" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="647" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1afe960c5f4c95cd9efa9f058741d089fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long sys_clone</definition>
        <argsstring>(unsigned long flags, void *stack, pid_t *parent_tid, void *tls, pid_t *child_tid)</argsstring>
        <name>sys_clone</name>
        <param>
          <type>unsigned long</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref> *</type>
          <declname>parent_tid</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>tls</declname>
        </param>
        <param>
          <type><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref> *</type>
          <declname>child_tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="698" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="698" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a4b625fcec2c1e98ec22be164cd02315c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long k_pcb_getpid</definition>
        <argsstring>(void)</argsstring>
        <name>k_pcb_getpid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="702" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="702" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a158d77445e5c6edc4cd573ec270676e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long sys_getpid</definition>
        <argsstring>()</argsstring>
        <name>sys_getpid</name>
        <briefdescription>
<para>[SYSCALL] getpid: get current task process id </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>long </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="711" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="711" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a9de10a9f1ad63fb9772b41410dbd9766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long sys_getppid</definition>
        <argsstring>()</argsstring>
        <name>sys_getppid</name>
        <briefdescription>
<para>[SYSCALL] getppid: get parent of current task pid </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>long </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="720" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="720" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a5111ec3b899498d5951050cd72bfe21b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_pcb_sleep</definition>
        <argsstring>(void *chan, spin_lock_t *lk)</argsstring>
        <name>k_pcb_sleep</name>
        <param>
          <type>void *</type>
          <declname>chan</declname>
        </param>
        <param>
          <type><ref refid="lock_8h_1a78e3055bd891f045188756c613a5ad92" kindref="member">spin_lock_t</ref> *</type>
          <declname>lk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="724" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="724" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a2d546871750b175deb1f3c0279c64e3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_pcb_wakeup</definition>
        <argsstring>(void *chan)</argsstring>
        <name>k_pcb_wakeup</name>
        <param>
          <type>void *</type>
          <declname>chan</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/pcb.c" line="733" column="6" bodyfile="src/kernel/sys/pcb.c" bodystart="733" bodyend="739"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="atomic_8h" kindref="compound">asm/atomic.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="pgtable_8h" kindref="compound">asm/pgtable.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stack_8h" kindref="compound">asm/stack.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="elf_8h" kindref="compound">common/elf.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="screen_8h" kindref="compound">drivers/screen/screen.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="fs_8h" kindref="compound">fs/fs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="math_8h" kindref="compound">lib/math.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdio_8h" kindref="compound">lib/stdio.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="string_8h" kindref="compound">lib/string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="irq_8h" kindref="compound">os/irq.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="pcb_8h" kindref="compound">os/pcb.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="smp_8h" kindref="compound">os/smp.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;user/user_programs.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a83f38b8c9da23021ed61d4031ab5aad3" kindref="member">current_running0</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a5f57f427e7da8049da09de558fc72e2d" kindref="member">current_running1</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a775dd48cd2188c627cbdd19b03b37212" kindref="member">current_running</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><ref refid="pcb_8c_1ab2792d5af8238e6563b665550c4c1c23" kindref="member">LIST_HEAD</ref>(<ref refid="pcb_8h_1a58658ee7ac1edae4ef80e87071be6b3d" kindref="member">ready_queue</ref>);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><ref refid="pcb_8c_1ab2792d5af8238e6563b665550c4c1c23" kindref="member">LIST_HEAD</ref>(<ref refid="pcb_8h_1a2faf8a6ddc84222929f0f6ef1a192537" kindref="member">block_queue</ref>);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[<ref refid="pcb_8h_1aa2b9c743d2373fe9432fccc8fd645f78" kindref="member">NUM_MAX_TASK</ref>];</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref><sp/><ref refid="pcb_8c_1ad0430733a8767855b580810743c5fb87" kindref="member">pid0_stack</ref><sp/>=<sp/><ref refid="mm_8h_1aef6d6f3957e639df5120d01892abe782" kindref="member">INIT_KERNEL_STACK</ref><sp/>+<sp/><ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref><sp/>*<sp/>3<sp/>-<sp/>112<sp/>-<sp/>288;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref><sp/><ref refid="pcb_8c_1a2480c4e3f86ff7b2575b89ef69e97355" kindref="member">pid0_stack2</ref><sp/>=<sp/><ref refid="mm_8h_1aef6d6f3957e639df5120d01892abe782" kindref="member">INIT_KERNEL_STACK</ref><sp/>+<sp/><ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref><sp/>*<sp/>5<sp/>-<sp/>112<sp/>-<sp/>288;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/><ref refid="pcb_8c_1aaefceaf10125be70ceac97d46a4f2bc3" kindref="member">pid0_pcb</ref><sp/>=<sp/>{.<ref refid="structpcb_1a1da0b84097537a6227022e4328977916" kindref="member">pid</ref><sp/>=<sp/>-1,<sp/>.kernel_sp<sp/>=<sp/>(<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref>)<ref refid="pcb_8c_1ad0430733a8767855b580810743c5fb87" kindref="member">pid0_stack</ref>,<sp/>.user_sp<sp/>=<sp/>(<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref>)(<ref refid="mm_8h_1aef6d6f3957e639df5120d01892abe782" kindref="member">INIT_KERNEL_STACK</ref><sp/>+<sp/><ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref><sp/>*<sp/>2),<sp/>.core_mask[0]<sp/>=<sp/>0x3,<sp/>.status<sp/>=<sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba64d5f8a2cf37ebdf772858331e82a54a" kindref="member">TASK_EXITED</ref>};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/><ref refid="pcb_8c_1a8176d551abe4fa60c56659184e032ab0" kindref="member">pid0_pcb2</ref><sp/>=<sp/>{.<ref refid="structpcb_1a1da0b84097537a6227022e4328977916" kindref="member">pid</ref><sp/>=<sp/>-1,<sp/>.kernel_sp<sp/>=<sp/>(<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref>)<ref refid="pcb_8c_1a2480c4e3f86ff7b2575b89ef69e97355" kindref="member">pid0_stack2</ref>,<sp/>.user_sp<sp/>=<sp/>(<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref>)(<ref refid="mm_8h_1aef6d6f3957e639df5120d01892abe782" kindref="member">INIT_KERNEL_STACK</ref><sp/>+<sp/><ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref><sp/>*<sp/>4),<sp/>.core_mask[0]<sp/>=<sp/>0x3,<sp/>.status<sp/>=<sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba64d5f8a2cf37ebdf772858331e82a54a" kindref="member">TASK_EXITED</ref>};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref><sp/><ref refid="pcb_8c_1a86b2aece801dbd55da125691aa8b73a7" kindref="member">freepid</ref>[<ref refid="pcb_8h_1aa2b9c743d2373fe9432fccc8fd645f78" kindref="member">NUM_MAX_TASK</ref>];</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref><sp/><ref refid="pcb_8c_1aa270cdccfc324df6feafe55e26b74a64" kindref="member">nextpid</ref>()<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="pcb_8h_1aa2b9c743d2373fe9432fccc8fd645f78" kindref="member">NUM_MAX_TASK</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structpcb" kindref="compound">pcb</ref>[i].in_use)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1aa270cdccfc324df6feafe55e26b74a64" kindref="member">nextpid</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a37c23b4e8693e6faad0735841ab5f529" kindref="member">init_pcb_i</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pcb_i,<sp/><ref refid="pcb_8h_1a02c2160f4d52670dcb8fdd49f0a5ffee" kindref="member">task_type_t</ref><sp/><ref refid="fat32_8h_1a1d127017fb298b889f4ba24752d08b8e" kindref="member">type</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fpid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>father_pid,<sp/>uint8_t<sp/>core_mask)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1aaf442a6d4665859606fb0376506a349c" kindref="member">k_memset</ref>((uint8_t<sp/>*)<ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].name,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].name));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a4985196d8a63d22e320cf33d904d2f92" kindref="member">k_memcpy</ref>((uint8_t<sp/>*)<ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].name,<sp/>(uint8_t<sp/>*)name,<sp/><ref refid="string_8h_1ae096c40164c6e072e600751bd7151fb9" kindref="member">k_strlen</ref>(name));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structpcb_1aeab75f925365bc4d7a91d2e86e16108b" kindref="member">in_use</ref><sp/>=<sp/><ref refid="types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structpcb_1a1da0b84097537a6227022e4328977916" kindref="member">pid</ref><sp/>=<sp/>pid;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structpcb_1acaf7915f3732a9dbff4ffb44fbaf5a31" kindref="member">fpid</ref><sp/>=<sp/>fpid;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structpcb_1a3e6585d1ce411a8971166a156a094da9" kindref="member">tid</ref><sp/>=<sp/>tid;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structpcb_1a231eaf6e04f879192b2fa61bc4665dde" kindref="member">father_pid</ref><sp/>=<sp/>father_pid;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structpcb_1a5add1aa788bd688a674d39b5cd859cb3" kindref="member">child_num</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1aaf442a6d4665859606fb0376506a349c" kindref="member">k_memset</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].child_pids,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].child_pids));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1aaf442a6d4665859606fb0376506a349c" kindref="member">k_memset</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].child_stat_addrs,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].child_stat_addrs));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structpcb_1a820404fdc4929f0736ee527d5d38bbc7" kindref="member">threadsum</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1aaf442a6d4665859606fb0376506a349c" kindref="member">k_memset</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].thread_ids,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].child_pids));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structpcb_1a8026314d08eef0fefc7321eadac2b95a" kindref="member">type</ref><sp/>=<sp/><ref refid="fat32_8h_1a1d127017fb298b889f4ba24752d08b8e" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structpcb_1ac727b3a53fceae0d702663b5e6690105" kindref="member">status</ref><sp/>=<sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4baebcd951a6127c3c50a4f197b2b637793" kindref="member">TASK_READY</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structpcb_1a3af2c933461a2a7bd3ada61290103667" kindref="member">cursor_x</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structpcb_1a05ac392d4980070cd3883bed31d16988" kindref="member">cursor_y</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structpcb_1a91159e803cbc7cfa350b62f8d5faec98" kindref="member">priority</ref>.<ref refid="structprior_1a69e9b33fe0a6940f13a8dc846a048791" kindref="member">priority</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structpcb_1a91159e803cbc7cfa350b62f8d5faec98" kindref="member">priority</ref>.<ref refid="structprior_1ab970c35de8e877613777afe6b8568f55" kindref="member">last_sched_time</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structpcb_1ad7ee741cb61788a57d8d655c8e558fb4" kindref="member">core_mask</ref>[0]<sp/>=<sp/>core_mask;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structpcb_1adcf91d83e29c48860b340324da1dd29c" kindref="member">locksum</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structpcb_1aebaa414dd2f387f642f22b2518229e44" kindref="member">mbox</ref><sp/>=<sp/>&amp;<ref refid="structpcb__mbox" kindref="compound">pcb_mbox</ref>[pcb_i];</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a6c5f6aa9763193e42afb7ebd6130e0ed" kindref="member">k_pcb_mbox_init</ref>(<ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structmbox" kindref="compound">mbox</ref>,<sp/>pcb_i);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1aaf442a6d4665859606fb0376506a349c" kindref="member">k_memset</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;(<ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].stime_last),<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="types_8h_1a46b18e17fe5ee9ab433cec7e1ec8f295" kindref="member">__kernel_time_t</ref>));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1aaf442a6d4665859606fb0376506a349c" kindref="member">k_memset</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;(<ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].utime_last),<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="types_8h_1a46b18e17fe5ee9ab433cec7e1ec8f295" kindref="member">__kernel_time_t</ref>));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1aaf442a6d4665859606fb0376506a349c" kindref="member">k_memset</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;(<ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].timer),<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpcbtimer" kindref="compound">pcbtimer_t</ref>));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structpcb_1af8e1a58c4304d8b577cc4876bf2191b5" kindref="member">dead_child_stime</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].<ref refid="structpcb_1a05dde3bef033363a18b449d8e81ca2e1" kindref="member">dead_child_utime</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1aaf442a6d4665859606fb0376506a349c" kindref="member">k_memset</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;(<ref refid="structpcb" kindref="compound">pcb</ref>[pcb_i].resources),<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrusage" kindref="compound">rusage_t</ref>));</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref><sp/><ref refid="pcb_8c_1af74e7a9700d18dd99ffa77cd66f87646" kindref="member">init_user_stack</ref>(<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref><sp/>*user_stack_kva,<sp/><ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref><sp/>*user_stack,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>envpc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*envp[],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file_name)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_length<sp/>=<sp/>(argc<sp/>+<sp/>envpc<sp/>+<sp/>3)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pointers_length<sp/>=<sp/>total_length;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>argc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_length<sp/>+=<sp/>(<ref refid="string_8h_1ae096c40164c6e072e600751bd7151fb9" kindref="member">k_strlen</ref>(argv[i])<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>envpc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_length<sp/>+=<sp/>(<ref refid="string_8h_1ae096c40164c6e072e600751bd7151fb9" kindref="member">k_strlen</ref>(envp[i])<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>total_length<sp/>+=<sp/>(<ref refid="string_8h_1ae096c40164c6e072e600751bd7151fb9" kindref="member">k_strlen</ref>(file_name)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>total_length<sp/>=<sp/><ref refid="math_8h_1ada01730368a1ca1c3fae33dca1bc948d" kindref="member">K_ROUND</ref>(total_length,<sp/>0x100);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref><sp/>kargv_pointer<sp/>=<sp/>(<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref>)*user_stack_kva<sp/>-<sp/>total_length;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a6d314f28bb0561436bae33a3973db114" kindref="member">intptr_t</ref><sp/>kargv<sp/>=<sp/>kargv_pointer<sp/>+<sp/>pointers_length;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>1.<sp/>store<sp/>argc<sp/>in<sp/>the<sp/>lowest<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)kargv_pointer)<sp/>=<sp/>argc;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>kargv_pointer<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>2.<sp/>save<sp/>argv<sp/>pointer<sp/>in<sp/>2nd<sp/>lowest<sp/>and<sp/>argv<sp/>in<sp/>lowest<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref><sp/>new_argv<sp/>=<sp/>(<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref>)*user_stack<sp/>-<sp/>total_length<sp/>+<sp/>pointers_length;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref><sp/>ret<sp/>=<sp/>new_argv;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>argc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref><sp/>*)kargv_pointer<sp/>+<sp/>i)<sp/>=<sp/>new_argv;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1a36d0589c17e8a5bba8c6e569ea0109f5" kindref="member">k_strcpy</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)kargv,<sp/>argv[i]);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_argv<sp/>+=<sp/>(<ref refid="string_8h_1ae096c40164c6e072e600751bd7151fb9" kindref="member">k_strlen</ref>(argv[i])<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kargv<sp/>+=<sp/>(<ref refid="string_8h_1ae096c40164c6e072e600751bd7151fb9" kindref="member">k_strlen</ref>(argv[i])<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>*((<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref><sp/>*)kargv_pointer<sp/>+<sp/>argc)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>kargv_pointer<sp/>+=<sp/>(argc<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>3.<sp/>save<sp/>envp<sp/>pointer<sp/>in<sp/>3rd<sp/>lowest<sp/>and<sp/>envp<sp/>in<sp/>2nd<sp/>lowest<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>envpc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref><sp/>*)kargv_pointer<sp/>+<sp/>i)<sp/>=<sp/>new_argv;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1a36d0589c17e8a5bba8c6e569ea0109f5" kindref="member">k_strcpy</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)kargv,<sp/>envp[i]);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_argv<sp/>+=<sp/><ref refid="string_8h_1ae096c40164c6e072e600751bd7151fb9" kindref="member">k_strlen</ref>(envp[i])<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kargv<sp/>+=<sp/><ref refid="string_8h_1ae096c40164c6e072e600751bd7151fb9" kindref="member">k_strlen</ref>(envp[i])<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>*((<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref><sp/>*)kargv_pointer<sp/>+<sp/>envpc)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>4.<sp/>save<sp/>file_name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a36d0589c17e8a5bba8c6e569ea0109f5" kindref="member">k_strcpy</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)kargv,<sp/>file_name);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>new_argv<sp/>=<sp/>new_argv<sp/>+<sp/><ref refid="string_8h_1ae096c40164c6e072e600751bd7151fb9" kindref="member">k_strlen</ref>(file_name)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>kargv<sp/>+=<sp/><ref refid="string_8h_1ae096c40164c6e072e600751bd7151fb9" kindref="member">k_strlen</ref>(file_name)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>now<sp/>user_sp<sp/>is<sp/>user_stack<sp/>-<sp/>total_length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>*user_stack_kva<sp/>-=<sp/>total_length;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>*user_stack<sp/>-=<sp/>total_length;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1af570f8c236ff40f11e384cbe069b87b5" kindref="member">k_pcb_init</ref>()<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1aaf442a6d4665859606fb0376506a349c" kindref="member">k_memset</ref>(&amp;<ref refid="structpcb" kindref="compound">pcb</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpcb" kindref="compound">pcb</ref>));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="pcb_8h_1aa2b9c743d2373fe9432fccc8fd645f78" kindref="member">NUM_MAX_TASK</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[i].<ref refid="structpcb_1a1da0b84097537a6227022e4328977916" kindref="member">pid</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[i].<ref refid="structpcb_1ac727b3a53fceae0d702663b5e6690105" kindref="member">status</ref><sp/>=<sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba64d5f8a2cf37ebdf772858331e82a54a" kindref="member">TASK_EXITED</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a83f38b8c9da23021ed61d4031ab5aad3" kindref="member">current_running0</ref><sp/>=<sp/>&amp;<ref refid="pcb_8c_1aaefceaf10125be70ceac97d46a4f2bc3" kindref="member">pid0_pcb</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a5f57f427e7da8049da09de558fc72e2d" kindref="member">current_running1</ref><sp/>=<sp/>&amp;<ref refid="pcb_8c_1a8176d551abe4fa60c56659184e032ab0" kindref="member">pid0_pcb2</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a775dd48cd2188c627cbdd19b03b37212" kindref="member">current_running</ref><sp/>=<sp/><ref refid="smp_8h_1ad31b9c256d6f7d32ec99b5f892f40c8c" kindref="member">k_smp_get_current_running</ref>();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>init_list_head(&amp;<ref refid="time_8h_1a0bbed12ae35f0784a3f7d9c29e283ea2" kindref="member">timers</ref>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a37c9544a2403eb490c70ddb6d9126030" kindref="member">sys_setpriority</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>who,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>niceval)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>-<ref refid="errno_8h_1a2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(which<sp/>&gt;<sp/><ref refid="pcb_8h_1aee947842544cb755f74360d1da4aa193" kindref="member">PRIO_USER</ref><sp/>||<sp/>which<sp/>&lt;<sp/><ref refid="pcb_8h_1a5aab1c88012d4b577b034e9291e87419" kindref="member">PRIO_PROCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>sys_setpriority_out;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(which)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1a5aab1c88012d4b577b034e9291e87419" kindref="member">PRIO_PROCESS</ref>:</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*current_running)-&gt;priority.priority<sp/>=<sp/>niceval;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1a9156ecb2854d071998278d63a107a215" kindref="member">PRIO_PGRP</ref>:</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*current_running)-&gt;priority.priority<sp/>=<sp/>niceval;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="pcb_8h_1ad907dc7ff26c1a93783a8d9acb32b5d4" kindref="member">NUM_MAX_CHILD</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*current_running)-&gt;child_pids[i]<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[(*current_running)-&gt;child_pids[i]].<ref refid="structpcb_1a91159e803cbc7cfa350b62f8d5faec98" kindref="member">priority</ref>.<ref refid="structprior_1a69e9b33fe0a6940f13a8dc846a048791" kindref="member">priority</ref><sp/>=<sp/>niceval;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(*current_running)-&gt;threadsum;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[(*current_running)-&gt;thread_ids[i]].<ref refid="structpcb_1a91159e803cbc7cfa350b62f8d5faec98" kindref="member">priority</ref>.<ref refid="structprior_1a69e9b33fe0a6940f13a8dc846a048791" kindref="member">priority</ref><sp/>=<sp/>niceval;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1aee947842544cb755f74360d1da4aa193" kindref="member">PRIO_USER</ref>:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal">sys_setpriority_out:</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a762a6d6fd8537d9842e21faa0972abb1" kindref="member">sys_getpriority</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>who)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*current_running)-&gt;priority.priority;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">uint64_t<sp/><ref refid="pcb_8c_1adc5cb8b600d43cff753d826be3d9ac5c" kindref="member">cal_priority</ref>(uint64_t<sp/>cur_time,<sp/>uint64_t<sp/>idle_time,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>priority)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>mid_div<sp/>=<sp/>cur_time<sp/>/<sp/>100,<sp/>mul_res<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mid_div<sp/>&gt;<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid_div<sp/>/=<sp/>10;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mul_res<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>cal_res<sp/>=<sp/>cur_time<sp/>-<sp/>idle_time<sp/>+<sp/>priority<sp/>*<sp/>mul_res;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cal_res;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*<ref refid="pcb_8c_1a4f9bf7d87efec667962613ca3835c93d" kindref="member">check_first_ready_task</ref>()<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*iterator<sp/>=<sp/><ref refid="pcb_8h_1a58658ee7ac1edae4ef80e87071be6b3d" kindref="member">ready_queue</ref>.<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*pcb_it<sp/>=<sp/><ref refid="types_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iterator<sp/>!=<sp/>&amp;<ref refid="pcb_8h_1a58658ee7ac1edae4ef80e87071be6b3d" kindref="member">ready_queue</ref>)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcb_it<sp/>=<sp/><ref refid="list_8h_1a26c976b7f654e70df318c1843e5094de" kindref="member">list_entry</ref>(iterator,<sp/><ref refid="structpcb" kindref="compound">pcb_t</ref>,<sp/>list);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="string_8h_1ad3fbffdca65397cb78cd0d3d38f7758f" kindref="member">k_strcmp</ref>(pcb_it-&gt;<ref refid="structpcb_1ab45cca0ed8e8b4596c1c91ee9cde2f12" kindref="member">name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;bubble&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pcb_it;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator<sp/>=<sp/>iterator-&gt;<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="types_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*<ref refid="pcb_8c_1ad01e6c074e73456d8b6384875915ae1d" kindref="member">choose_sched_task</ref>(<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*queue)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>cur_time<sp/>=<sp/><ref refid="time_8h_1a74c6574a43231a37176bb2156bfc4ee7" kindref="member">k_time_get_ticks</ref>();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>max_priority<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>cur_priority<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*list_iterator<sp/>=<sp/>queue-&gt;<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*max_one<sp/>=<sp/><ref refid="types_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*pcb_iterator<sp/>=<sp/><ref refid="types_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu_id<sp/>=<sp/><ref refid="smp_8h_1af01b72c2ec67649abee4185ad9d9fa34" kindref="member">k_smp_get_current_cpu_id</ref>();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(list_iterator-&gt;<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref><sp/>!=<sp/>queue)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcb_iterator<sp/>=<sp/><ref refid="list_8h_1a26c976b7f654e70df318c1843e5094de" kindref="member">list_entry</ref>(list_iterator,<sp/><ref refid="structpcb" kindref="compound">pcb_t</ref>,<sp/>list);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(pcb_iterator-&gt;<ref refid="structpcb_1ad7ee741cb61788a57d8d655c8e558fb4" kindref="member">core_mask</ref>[cpu_id<sp/>/<sp/>8]<sp/>&amp;<sp/>(0x1<sp/>&lt;&lt;<sp/>(cpu_id<sp/>%<sp/>8))))<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur_priority<sp/>=<sp/><ref refid="pcb_8c_1adc5cb8b600d43cff753d826be3d9ac5c" kindref="member">cal_priority</ref>(cur_time,<sp/>pcb_iterator-&gt;<ref refid="structpcb_1a91159e803cbc7cfa350b62f8d5faec98" kindref="member">priority</ref>.<ref refid="structprior_1ab970c35de8e877613777afe6b8568f55" kindref="member">last_sched_time</ref>,<sp/>pcb_iterator-&gt;<ref refid="structpcb_1a91159e803cbc7cfa350b62f8d5faec98" kindref="member">priority</ref>.<ref refid="structprior_1a69e9b33fe0a6940f13a8dc846a048791" kindref="member">priority</ref>);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_priority<sp/>&lt;<sp/>cur_priority)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_priority<sp/>=<sp/>cur_priority;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_one<sp/>=<sp/>pcb_iterator;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_iterator<sp/>=<sp/>list_iterator-&gt;<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>max_one-&gt;<ref refid="structpcb_1a91159e803cbc7cfa350b62f8d5faec98" kindref="member">priority</ref>.<ref refid="structprior_1ab970c35de8e877613777afe6b8568f55" kindref="member">last_sched_time</ref><sp/>=<sp/>cur_time;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_one;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1abeffcafe26085a09b2ca3986ed288125" kindref="member">enqueue</ref>(<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/><ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*<ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>,<sp/><ref refid="pcb_8h_1a01980b8e156378d98867d30058688333" kindref="member">enqueue_way_t</ref><sp/>way)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(way)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1a63b43285903b7693f45e3699209d02eaa5c6945e962fca284e243730269169d5e" kindref="member">ENQUEUE_LIST</ref>:</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_add_tail(</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/><ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1a63b43285903b7693f45e3699209d02eaa152a16c77c36dbf44d70dc9d97ede789" kindref="member">ENQUEUE_TIMER_LIST</ref>:<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*new_inserter<sp/>=<sp/><ref refid="list_8h_1a26c976b7f654e70df318c1843e5094de" kindref="member">list_entry</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/><ref refid="structpcb" kindref="compound">pcb_t</ref>,<sp/>list);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*iterator_list<sp/>=<sp/><ref refid="time_8h_1a0bbed12ae35f0784a3f7d9c29e283ea2" kindref="member">timers</ref>.<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*iterator_pcb<sp/>=<sp/><ref refid="types_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iterator_list<sp/>!=<sp/>&amp;<ref refid="time_8h_1a0bbed12ae35f0784a3f7d9c29e283ea2" kindref="member">timers</ref>)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator_pcb<sp/>=<sp/><ref refid="list_8h_1a26c976b7f654e70df318c1843e5094de" kindref="member">list_entry</ref>(iterator_list,<sp/><ref refid="structpcb" kindref="compound">pcb_t</ref>,<sp/>list);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="time_8h_1a7fe46bf79cad6f526d80bae9f12d7eb6" kindref="member">k_time_cmp_nanotime</ref>(&amp;iterator_pcb-&gt;<ref refid="structpcb_1a8fb558468f9c7b8f2e371e53cbb31a4e" kindref="member">timer</ref>.<ref refid="structpcbtimer_1afe1272eacb16ce7bb0f4476f9bae8c7f" kindref="member">end_time</ref>,<sp/>&amp;new_inserter-&gt;<ref refid="structpcb_1a8fb558468f9c7b8f2e371e53cbb31a4e" kindref="member">timer</ref>.<ref refid="structpcbtimer_1afe1272eacb16ce7bb0f4476f9bae8c7f" kindref="member">end_time</ref>)<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_add_tail(</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/>iterator_list);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*<ref refid="pcb_8c_1a51cfeafc411596ee2a2da62e80551c17" kindref="member">dequeue</ref>(<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*queue,<sp/><ref refid="pcb_8h_1a3b03c501b04f29e13e344d0b3514cfc5" kindref="member">dequeue_way_t</ref><sp/>target)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>plain<sp/>and<sp/>simple<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*ret<sp/>=<sp/><ref refid="types_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*task<sp/>=<sp/><ref refid="pcb_8c_1a4f9bf7d87efec667962613ca3835c93d" kindref="member">check_first_ready_task</ref>();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1a9079e92d38879b84401289583ab9ce20a3f8bf8702ce1a2d7da9a65f6cde82733" kindref="member">DEQUEUE_LIST</ref>:</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="list_8h_1a26c976b7f654e70df318c1843e5094de" kindref="member">list_entry</ref>(queue-&gt;<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>,<sp/><ref refid="structpcb" kindref="compound">pcb_t</ref>,<sp/>list);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;(ret-&gt;<ref refid="structpcb_1a120965426502b0d148c111eacb5d420b" kindref="member">list</ref>));</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1a9079e92d38879b84401289583ab9ce20a7e62c005c2b4584320643f010988efec" kindref="member">DEQUEUE_LIST_STRATEGY</ref>:</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ret<sp/>=<sp/>choose_sched_task(queue);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!task)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="list_8h_1a26c976b7f654e70df318c1843e5094de" kindref="member">list_entry</ref>(queue-&gt;<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>,<sp/><ref refid="structpcb" kindref="compound">pcb_t</ref>,<sp/>list);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>task;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;(ret-&gt;<ref refid="structpcb_1a120965426502b0d148c111eacb5d420b" kindref="member">list</ref>));</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a85b5fc5efbbb65668438fecad67c06e4" kindref="member">sys_nanosleep</ref>(<ref refid="structnanotime__val" kindref="compound">nanotime_val_t</ref><sp/>*rqtp,<sp/><ref refid="structnanotime__val" kindref="compound">nanotime_val_t</ref><sp/>*rmtp)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>(*current_running)-&gt;timer.initialized<sp/>=<sp/><ref refid="types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="time_8h_1a723c6615d70bae09da02cb9d16344ee4" kindref="member">k_time_get_nanotime</ref>(&amp;(*current_running)-&gt;timer.start_time);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="time_8h_1a0190f196ef401ddd8e6dcd075cab531c" kindref="member">k_time_add_nanotime</ref>(rqtp,<sp/>&amp;(*current_running)-&gt;timer.start_time,<sp/>&amp;(*current_running)-&gt;timer.end_time);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>(*current_running)-&gt;timer.remain_time<sp/>=<sp/>rmtp;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a46a988dfd7b1038c6ba7f97ec2a7c4f4" kindref="member">k_pcb_block</ref>(&amp;((*current_running)-&gt;list),<sp/>&amp;<ref refid="time_8h_1a0bbed12ae35f0784a3f7d9c29e283ea2" kindref="member">timers</ref>,<sp/><ref refid="pcb_8h_1a63b43285903b7693f45e3699209d02eaa152a16c77c36dbf44d70dc9d97ede789" kindref="member">ENQUEUE_TIMER_LIST</ref>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1ab235dcbe70f00d25d99f6d0bce4ec087" kindref="member">k_pcb_scheduler</ref>();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1ac61a87c664aa7443794d1d2cd3f07e63" kindref="member">check_sleeping</ref>()<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlist__node" kindref="compound">list_node_t</ref><sp/>*q;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnanotime__val" kindref="compound">nanotime_val_t</ref><sp/>now_time;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*p<sp/>=<sp/><ref refid="time_8h_1a0bbed12ae35f0784a3f7d9c29e283ea2" kindref="member">timers</ref>.<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="time_8h_1a723c6615d70bae09da02cb9d16344ee4" kindref="member">k_time_get_nanotime</ref>(&amp;now_time);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>&amp;<ref refid="time_8h_1a0bbed12ae35f0784a3f7d9c29e283ea2" kindref="member">timers</ref>)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*p_pcb<sp/>=<sp/><ref refid="list_8h_1a26c976b7f654e70df318c1843e5094de" kindref="member">list_entry</ref>(p,<sp/><ref refid="structpcb" kindref="compound">pcb_t</ref>,<sp/>list);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="time_8h_1a7fe46bf79cad6f526d80bae9f12d7eb6" kindref="member">k_time_cmp_nanotime</ref>(&amp;now_time,<sp/>&amp;p_pcb-&gt;<ref refid="structpcb_1a8fb558468f9c7b8f2e371e53cbb31a4e" kindref="member">timer</ref>.<ref refid="structpcbtimer_1afe1272eacb16ce7bb0f4476f9bae8c7f" kindref="member">end_time</ref>)<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>p-&gt;<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a3534b2b27aeed25d68791f153d794810" kindref="member">k_pcb_unblock</ref>(p,<sp/>&amp;<ref refid="pcb_8h_1a58658ee7ac1edae4ef80e87071be6b3d" kindref="member">ready_queue</ref>,<sp/><ref refid="pcb_8h_1a88409d37561d84ec48058b9f84bb3d5eae79cd7b408cb9c190ad524869ef00c14" kindref="member">UNBLOCK_TO_LIST_STRATEGY</ref>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1ab235dcbe70f00d25d99f6d0bce4ec087" kindref="member">k_pcb_scheduler</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list_is_empty(&amp;<ref refid="time_8h_1a0bbed12ae35f0784a3f7d9c29e283ea2" kindref="member">timers</ref>))<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1ac61a87c664aa7443794d1d2cd3f07e63" kindref="member">check_sleeping</ref>();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*curr<sp/>=<sp/>(*current_running);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpuid<sp/>=<sp/><ref refid="smp_8h_1af01b72c2ec67649abee4185ad9d9fa34" kindref="member">k_smp_get_current_cpu_id</ref>();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curr-&gt;<ref refid="structpcb_1ac727b3a53fceae0d702663b5e6690105" kindref="member">status</ref><sp/>==<sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba9bd2895158d9e7c8cf80b57659fcba50" kindref="member">TASK_RUNNING</ref><sp/>&amp;&amp;<sp/>curr-&gt;<ref refid="structpcb_1a1da0b84097537a6227022e4328977916" kindref="member">pid</ref><sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1abeffcafe26085a09b2ca3986ed288125" kindref="member">enqueue</ref>(&amp;curr-&gt;<ref refid="structpcb_1a120965426502b0d148c111eacb5d420b" kindref="member">list</ref>,<sp/>&amp;<ref refid="pcb_8h_1a58658ee7ac1edae4ef80e87071be6b3d" kindref="member">ready_queue</ref>,<sp/><ref refid="pcb_8h_1a63b43285903b7693f45e3699209d02eaa5c6945e962fca284e243730269169d5e" kindref="member">ENQUEUE_LIST</ref>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*next_pcb<sp/>=<sp/><ref refid="pcb_8c_1a51cfeafc411596ee2a2da62e80551c17" kindref="member">dequeue</ref>(&amp;<ref refid="pcb_8h_1a58658ee7ac1edae4ef80e87071be6b3d" kindref="member">ready_queue</ref>,<sp/><ref refid="pcb_8h_1a9079e92d38879b84401289583ab9ce20a7e62c005c2b4584320643f010988efec" kindref="member">DEQUEUE_LIST_STRATEGY</ref>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>d_screen_pcb_move_cursor(screen_cursor_x,<sp/>screen_cursor_y);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>d_screen_load_curpcb_cursor();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>next_pcb-&gt;<ref refid="structpcb_1ac727b3a53fceae0d702663b5e6690105" kindref="member">status</ref><sp/>=<sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba9bd2895158d9e7c8cf80b57659fcba50" kindref="member">TASK_RUNNING</ref>;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cpuid<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a83f38b8c9da23021ed61d4031ab5aad3" kindref="member">current_running0</ref><sp/>=<sp/>next_pcb;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a775dd48cd2188c627cbdd19b03b37212" kindref="member">current_running</ref><sp/>=<sp/>&amp;<ref refid="pcb_8c_1a83f38b8c9da23021ed61d4031ab5aad3" kindref="member">current_running0</ref>;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a5f57f427e7da8049da09de558fc72e2d" kindref="member">current_running1</ref><sp/>=<sp/>next_pcb;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a775dd48cd2188c627cbdd19b03b37212" kindref="member">current_running</ref><sp/>=<sp/>&amp;<ref refid="pcb_8c_1a5f57f427e7da8049da09de558fc72e2d" kindref="member">current_running1</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>set_satp(<ref refid="pgtable_8h_1a8b39454e1fcc5204db5a6772f73bc6a1" kindref="member">SATP_MODE_SV39</ref>,<sp/>(*current_running)-&gt;pid<sp/>+<sp/>1,<sp/>(*current_running)-&gt;pgdir);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>local_flush_tlb_all();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8h_1a2c1b41b2da3748be99fc9cba2ffdce7b" kindref="member">switch_to</ref>(curr,<sp/>next_pcb);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1aa38a6ba4849edd0e34a225dbb2975f94" kindref="member">sys_sched_yield</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1ab235dcbe70f00d25d99f6d0bce4ec087" kindref="member">k_pcb_scheduler</ref>();</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a46a988dfd7b1038c6ba7f97ec2a7c4f4" kindref="member">k_pcb_block</ref>(<ref refid="structlist__node" kindref="compound">list_node_t</ref><sp/>*pcb_node,<sp/><ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*queue,<sp/><ref refid="pcb_8h_1a01980b8e156378d98867d30058688333" kindref="member">enqueue_way_t</ref><sp/>way)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1abeffcafe26085a09b2ca3986ed288125" kindref="member">enqueue</ref>(pcb_node,<sp/>queue,<sp/>way);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>(*current_running)-&gt;status<sp/>=<sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba108284117a3f463352658a08930a3888" kindref="member">TASK_BLOCKED</ref>;</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a3534b2b27aeed25d68791f153d794810" kindref="member">k_pcb_unblock</ref>(<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*from_queue,<sp/><ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*to_queue,<sp/><ref refid="pcb_8h_1a44d797e82ea4cda687ee34355a189481" kindref="member">unblock_way_t</ref><sp/>way)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>unblock<sp/>the<sp/>`pcb`<sp/>from<sp/>the<sp/>block<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*fetch_pcb<sp/>=<sp/><ref refid="types_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(way)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1a88409d37561d84ec48058b9f84bb3d5eafe90015272c7f1d525d23cc149b123d6" kindref="member">UNBLOCK_TO_LIST_FRONT</ref>:</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fetch_pcb<sp/>=<sp/><ref refid="pcb_8c_1a51cfeafc411596ee2a2da62e80551c17" kindref="member">dequeue</ref>(from_queue-&gt;<ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref>,<sp/><ref refid="pcb_8h_1a9079e92d38879b84401289583ab9ce20a3f8bf8702ce1a2d7da9a65f6cde82733" kindref="member">DEQUEUE_LIST</ref>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_add(&amp;fetch_pcb-&gt;<ref refid="structpcb_1a120965426502b0d148c111eacb5d420b" kindref="member">list</ref>,<sp/>to_queue);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1a88409d37561d84ec48058b9f84bb3d5ea658485209c0207b8934534bd192f7e0c" kindref="member">UNBLOCK_TO_LIST_BACK</ref>:</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fetch_pcb<sp/>=<sp/><ref refid="pcb_8c_1a51cfeafc411596ee2a2da62e80551c17" kindref="member">dequeue</ref>(from_queue-&gt;<ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref>,<sp/><ref refid="pcb_8h_1a9079e92d38879b84401289583ab9ce20a3f8bf8702ce1a2d7da9a65f6cde82733" kindref="member">DEQUEUE_LIST</ref>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_add_tail(&amp;fetch_pcb-&gt;<ref refid="structpcb_1a120965426502b0d148c111eacb5d420b" kindref="member">list</ref>,<sp/>to_queue);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1a88409d37561d84ec48058b9f84bb3d5eaad96627c69bfb0c4b0a3aff418353d48" kindref="member">UNBLOCK_ONLY</ref>:</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fetch_pcb<sp/>=<sp/><ref refid="pcb_8c_1a51cfeafc411596ee2a2da62e80551c17" kindref="member">dequeue</ref>(from_queue-&gt;<ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref>,<sp/><ref refid="pcb_8h_1a9079e92d38879b84401289583ab9ce20a3f8bf8702ce1a2d7da9a65f6cde82733" kindref="member">DEQUEUE_LIST</ref>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1a88409d37561d84ec48058b9f84bb3d5eae79cd7b408cb9c190ad524869ef00c14" kindref="member">UNBLOCK_TO_LIST_STRATEGY</ref>:</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fetch_pcb<sp/>=<sp/><ref refid="pcb_8c_1a51cfeafc411596ee2a2da62e80551c17" kindref="member">dequeue</ref>(from_queue-&gt;<ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref>,<sp/><ref refid="pcb_8h_1a9079e92d38879b84401289583ab9ce20a7e62c005c2b4584320643f010988efec" kindref="member">DEQUEUE_LIST_STRATEGY</ref>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_add_tail(&amp;fetch_pcb-&gt;<ref refid="structpcb_1a120965426502b0d148c111eacb5d420b" kindref="member">list</ref>,<sp/>to_queue);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>fetch_pcb-&gt;<ref refid="structpcb_1ac727b3a53fceae0d702663b5e6690105" kindref="member">status</ref><sp/>=<sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4baebcd951a6127c3c50a4f197b2b637793" kindref="member">TASK_READY</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1af740734e52630b6e24832a2dbc099398" kindref="member">sys_sched_setaffinity</ref>(<ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref><sp/>pid,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="types_8h_1ac476a80395b2321c72363bbe7c139ff9" kindref="member">byte_size_t</ref><sp/>*user_mask_ptr)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pid<sp/>&gt;<sp/><ref refid="pcb_8h_1aa2b9c743d2373fe9432fccc8fd645f78" kindref="member">NUM_MAX_TASK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="errno_8h_1a2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*target<sp/>=<sp/>pid<sp/>?<sp/>&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[pid]<sp/>:<sp/>(*current_running);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target-&gt;<ref refid="structpcb_1ac727b3a53fceae0d702663b5e6690105" kindref="member">status</ref><sp/>==<sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba64d5f8a2cf37ebdf772858331e82a54a" kindref="member">TASK_EXITED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="errno_8h_1a2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>core_len<sp/>=<sp/>CPU_SET_SIZE;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>copy_len<sp/>=<sp/><ref refid="math_8h_1a546f06262919d41fdb238bb26548cdd5" kindref="member">k_min</ref>(core_len,<sp/>len);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a4985196d8a63d22e320cf33d904d2f92" kindref="member">k_memcpy</ref>(target-&gt;<ref refid="structpcb_1ad7ee741cb61788a57d8d655c8e558fb4" kindref="member">core_mask</ref>,<sp/>user_mask_ptr,<sp/>copy_len);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a172a2eb43df307e23df85372199a4cda" kindref="member">sys_sched_getaffinity</ref>(<ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref><sp/>pid,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>uint8_t<sp/>*user_mask_ptr)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pid<sp/>&gt;<sp/><ref refid="pcb_8h_1aa2b9c743d2373fe9432fccc8fd645f78" kindref="member">NUM_MAX_TASK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="errno_8h_1a2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*target<sp/>=<sp/>pid<sp/>?<sp/>&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[pid]<sp/>:<sp/>(*current_running);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target-&gt;<ref refid="structpcb_1ac727b3a53fceae0d702663b5e6690105" kindref="member">status</ref><sp/>==<sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba64d5f8a2cf37ebdf772858331e82a54a" kindref="member">TASK_EXITED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="errno_8h_1a2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>core_len<sp/>=<sp/>CPU_SET_SIZE;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>copy_len<sp/>=<sp/><ref refid="math_8h_1a546f06262919d41fdb238bb26548cdd5" kindref="member">k_min</ref>(core_len,<sp/>len);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a4985196d8a63d22e320cf33d904d2f92" kindref="member">k_memcpy</ref>(user_mask_ptr,<sp/>target-&gt;<ref refid="structpcb_1ad7ee741cb61788a57d8d655c8e558fb4" kindref="member">core_mask</ref>,<sp/>copy_len);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1aa5c807043b9713e4e2f3037422c8c609" kindref="member">spawn</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file_name)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="pcb_8c_1aa270cdccfc324df6feafe55e26b74a64" kindref="member">nextpid</ref>();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a37c23b4e8693e6faad0735841ab5f529" kindref="member">init_pcb_i</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)file_name,<sp/>i,<sp/><ref refid="pcb_8h_1ab8d9e3d1f9fdf95a31d7b4ce32768eaba73247b7900083fb57378cfc9ef9a3172" kindref="member">USER_PROCESS</ref>,<sp/>i,<sp/>i,<sp/>0,<sp/>(*current_running)-&gt;father_pid,<sp/>(*current_running)-&gt;core_mask[0]);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref><sp/>kernel_stack<sp/>=<sp/><ref refid="stack_8h_1ad72f726c9f29ef22f7a26cdf0fd601ef" kindref="member">get_kernel_address</ref>(i);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref><sp/>user_stack_kva<sp/>=<sp/>kernel_stack<sp/>-<sp/>4<sp/>*<sp/><ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref>;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref><sp/>user_stack<sp/>=<sp/><ref refid="mm_8h_1a1c61109160d8b25e154f4334c2a3d1d8" kindref="member">USER_STACK_ADDR</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pgtable_8h_1a84884de9218381c7120044a50c84eeba" kindref="member">PTE</ref><sp/>*pgdir<sp/>=<sp/>(<ref refid="pgtable_8h_1a84884de9218381c7120044a50c84eeba" kindref="member">PTE</ref><sp/>*)<ref refid="mm_8h_1a15a9cb45278812554529da95588e9209" kindref="member">k_mm_alloc_page</ref>(1);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pgtable_8h_1a16a05e338bbca3bb0626f91e032ac94c" kindref="member">clear_pgdir</ref>((<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref>)pgdir);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mm_8h_1aed1b9a35c0f6f6039f48c12957dfccb1" kindref="member">k_mm_share_pgtable</ref>(pgdir,<sp/>pa2kva(<ref refid="pgtable_8h_1aedc2ac196557ee36b7a3f9051e008a63" kindref="member">PGDIR_PA</ref>));</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[i].<ref refid="structpcb_1a4c9597d737c8e1674c2f844b76b10aeb" kindref="member">pgdir</ref><sp/>=<sp/>kva2pa((<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref>)pgdir)<sp/>&gt;&gt;<sp/><ref refid="pgtable_8h_1a7fe96413b980b8b6c52da8ebb14154e8" kindref="member">NORMAL_PAGE_SHIFT</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*binary<sp/>=<sp/><ref refid="types_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>get_elf_file(file_name,<sp/>&amp;binary,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8h_1a5410d43bb81d9e035039cdc3ce2484be" kindref="member">void_task</ref><sp/>process<sp/>=<sp/>(<ref refid="pcb_8h_1a5410d43bb81d9e035039cdc3ce2484be" kindref="member">void_task</ref>)<ref refid="elf_8h_1a2d042539a0bd432f89e5ae93e1bb2f64" kindref="member">load_elf</ref>(binary,<sp/>len,<sp/>(<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref>)pgdir,<sp/>(<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref>(*)(<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref>,<sp/><ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref>))<ref refid="mm_8h_1a0ac89a697d37de67b2f7a8861c3a1e8e" kindref="member">k_mm_alloc_page_helper</ref>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mm_8h_1a88dba7dbe2c5f022becc2615e51fc92f" kindref="member">k_mm_map</ref>(<ref refid="mm_8h_1a1c61109160d8b25e154f4334c2a3d1d8" kindref="member">USER_STACK_ADDR</ref><sp/>-<sp/><ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref>,<sp/>kva2pa(user_stack_kva<sp/>-<sp/><ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref>),<sp/>pgdir);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>k_mm_map(USER_STACK_ADDR,<sp/>kva2pa(user_stack_kva),<sp/>pgdir);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[i].pgdir<sp/>=<sp/>kva2pa((<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref>)pgdir)<sp/>&gt;&gt;<sp/><ref refid="pgtable_8h_1a7fe96413b980b8b6c52da8ebb14154e8" kindref="member">NORMAL_PAGE_SHIFT</ref>;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a4619d60667f4a7c84a28f9cd741f7ba4" kindref="member">init_context_stack</ref>(kernel_stack,<sp/>user_stack,<sp/>0,<sp/><ref refid="types_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>(<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref>)(process),<sp/>&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[i]);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>list_add_tail(&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[i].list,<sp/>&amp;<ref refid="pcb_8h_1a58658ee7ac1edae4ef80e87071be6b3d" kindref="member">ready_queue</ref>);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>i;</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a5a2119b4304437c4e3aff0e8c7484b1e" kindref="member">sys_spawn</ref>(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file_name)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>file<sp/>existence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="fs_8c_1ac7c5c9e629cd40cf7f3ab374962d2610" kindref="member">fs_check_file_existence</ref>(file_name))<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="errno_8h_1a2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1aa5c807043b9713e4e2f3037422c8c609" kindref="member">spawn</ref>(file_name);</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a3dc0f40e7f1307efe0efe5abc6d551b4" kindref="member">sys_fork</ref>()<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="pcb_8c_1aa270cdccfc324df6feafe55e26b74a64" kindref="member">nextpid</ref>();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref><sp/>fpid<sp/>=<sp/>(*current_running)-&gt;pid;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name[<ref refid="pcb_8h_1a9bdec823ad2bc9c3dbe8c3c96e3f9637" kindref="member">NUM_MAX_PCB_NAME</ref>];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>name_len<sp/>=<sp/><ref refid="math_8h_1a546f06262919d41fdb238bb26548cdd5" kindref="member">k_min</ref>(<ref refid="string_8h_1ae096c40164c6e072e600751bd7151fb9" kindref="member">k_strlen</ref>((*current_running)-&gt;name),<sp/>14);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a4985196d8a63d22e320cf33d904d2f92" kindref="member">k_memcpy</ref>((uint8_t<sp/>*)name,<sp/>(uint8_t<sp/>*)(*current_running)-&gt;name,<sp/>name_len);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a3ffa6c0492a0ff6b656c748a32e1bfcf" kindref="member">k_strcat</ref>(name,<sp/></highlight><highlight class="stringliteral">&quot;_child&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a37c23b4e8693e6faad0735841ab5f529" kindref="member">init_pcb_i</ref>(name,<sp/>i,<sp/><ref refid="pcb_8h_1ab8d9e3d1f9fdf95a31d7b4ce32768eaba73247b7900083fb57378cfc9ef9a3172" kindref="member">USER_PROCESS</ref>,<sp/>i,<sp/>i,<sp/>0,<sp/>fpid,<sp/>(*current_running)-&gt;core_mask[0]);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[fpid].<ref refid="structpcb_1a0c21f904d8f109d1fcb20085141b5919" kindref="member">child_pids</ref>[<ref refid="structpcb" kindref="compound">pcb</ref>[fpid].<ref refid="structpcb_1a5add1aa788bd688a674d39b5cd859cb3" kindref="member">child_num</ref>]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[fpid].<ref refid="structpcb_1a5add1aa788bd688a674d39b5cd859cb3" kindref="member">child_num</ref>++;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref><sp/>kernel_stack_kva<sp/>=<sp/><ref refid="stack_8h_1ad72f726c9f29ef22f7a26cdf0fd601ef" kindref="member">get_kernel_address</ref>(i);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref><sp/>user_stack_kva<sp/>=<sp/>kernel_stack_kva<sp/>-<sp/>4<sp/>*<sp/><ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref>;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pgtable_8h_1a84884de9218381c7120044a50c84eeba" kindref="member">PTE</ref><sp/>*pgdir<sp/>=<sp/>(<ref refid="pgtable_8h_1a84884de9218381c7120044a50c84eeba" kindref="member">PTE</ref><sp/>*)<ref refid="mm_8h_1a15a9cb45278812554529da95588e9209" kindref="member">k_mm_alloc_page</ref>(1);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pgtable_8h_1a16a05e338bbca3bb0626f91e032ac94c" kindref="member">clear_pgdir</ref>((<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref>)pgdir);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mm_8h_1aed1b9a35c0f6f6039f48c12957dfccb1" kindref="member">k_mm_share_pgtable</ref>(pgdir,<sp/>pa2kva(<ref refid="pgtable_8h_1aedc2ac196557ee36b7a3f9051e008a63" kindref="member">PGDIR_PA</ref>));</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a8a2fff3cc3f61aaf7d825c92a36819d5" kindref="member">fork_pcb_stack</ref>(kernel_stack_kva,<sp/>user_stack_kva,<sp/>&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[i]);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mm_8h_1adad693c99d9b33d077b78a75aa5201ce" kindref="member">k_mm_fork_pgtable</ref>(pgdir,<sp/>(pa2kva((*current_running)-&gt;pgdir<sp/>&lt;&lt;<sp/><ref refid="pgtable_8h_1a7fe96413b980b8b6c52da8ebb14154e8" kindref="member">NORMAL_PAGE_SHIFT</ref>)));</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mm_8h_1a88dba7dbe2c5f022becc2615e51fc92f" kindref="member">k_mm_map</ref>(<ref refid="mm_8h_1a1c61109160d8b25e154f4334c2a3d1d8" kindref="member">USER_STACK_ADDR</ref><sp/>-<sp/><ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref>,<sp/>kva2pa(user_stack_kva<sp/>-<sp/><ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref>),<sp/>pgdir);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>k_mm_map(USER_STACK_ADDR,<sp/>kva2pa(user_stack_kva<sp/>-<sp/>PAGE_SIZE),<sp/>pgdir);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[i].<ref refid="structpcb_1a4c9597d737c8e1674c2f844b76b10aeb" kindref="member">pgdir</ref><sp/>=<sp/>kva2pa((<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref>)pgdir)<sp/>&gt;&gt;<sp/><ref refid="pgtable_8h_1a7fe96413b980b8b6c52da8ebb14154e8" kindref="member">NORMAL_PAGE_SHIFT</ref>;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>list_add_tail(&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[i].list,<sp/>&amp;<ref refid="pcb_8h_1a58658ee7ac1edae4ef80e87071be6b3d" kindref="member">ready_queue</ref>);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1aa8bc378bc7bc365ecccceb9809105f89" kindref="member">kill</ref>(<ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref><sp/>pid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exit_status)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*target<sp/>=<sp/>&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[pid];</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>realease<sp/>lock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>target-&gt;<ref refid="structpcb_1adcf91d83e29c48860b340324da1dd29c" kindref="member">locksum</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lock_8h_1abbcb492e3aa9c973e5a75759c294de73" kindref="member">k_mutex_lock_release</ref>(target-&gt;<ref refid="structpcb_1aae99a0206cb0303f06aee6eb81797a90" kindref="member">lock_ids</ref>[i]<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target-&gt;<ref refid="structpcb_1a231eaf6e04f879192b2fa61bc4665dde" kindref="member">father_pid</ref><sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*parent<sp/>=<sp/>&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[target-&gt;<ref refid="structpcb_1a231eaf6e04f879192b2fa61bc4665dde" kindref="member">father_pid</ref>];</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parent-&gt;<ref refid="structpcb_1a8fb558468f9c7b8f2e371e53cbb31a4e" kindref="member">timer</ref>.<ref refid="structpcbtimer_1a8de809b1b2e7923768e30bfc175dca83" kindref="member">initialized</ref><sp/>&amp;&amp;<sp/>parent-&gt;<ref refid="structpcb_1ac727b3a53fceae0d702663b5e6690105" kindref="member">status</ref><sp/>==<sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba108284117a3f463352658a08930a3888" kindref="member">TASK_BLOCKED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a3534b2b27aeed25d68791f153d794810" kindref="member">k_pcb_unblock</ref>(&amp;parent-&gt;<ref refid="structpcb_1a120965426502b0d148c111eacb5d420b" kindref="member">list</ref>,<sp/>&amp;<ref refid="pcb_8h_1a58658ee7ac1edae4ef80e87071be6b3d" kindref="member">ready_queue</ref>,<sp/><ref refid="pcb_8h_1a88409d37561d84ec48058b9f84bb3d5eae79cd7b408cb9c190ad524869ef00c14" kindref="member">UNBLOCK_TO_LIST_STRATEGY</ref>);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;<ref refid="structpcb_1af8e1a58c4304d8b577cc4876bf2191b5" kindref="member">dead_child_stime</ref><sp/>+=<sp/><ref refid="time_8h_1ab5bf28d945be01eed14d8195c0f01537" kindref="member">k_time_get_ticks_from_time</ref>(&amp;target-&gt;<ref refid="structpcb_1afd18b6c3c18534c5587abce4cde24974" kindref="member">resources</ref>.<ref refid="structrusage_1aa060da934655b8e0330fd29bc2130956" kindref="member">ru_stime</ref>);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;<ref refid="structpcb_1a05dde3bef033363a18b449d8e81ca2e1" kindref="member">dead_child_utime</ref><sp/>+=<sp/><ref refid="time_8h_1ab5bf28d945be01eed14d8195c0f01537" kindref="member">k_time_get_ticks_from_time</ref>(&amp;target-&gt;<ref refid="structpcb_1afd18b6c3c18534c5587abce4cde24974" kindref="member">resources</ref>.<ref refid="structrusage_1a20e49fe541031dd1fb3abb08c299745c" kindref="member">ru_utime</ref>);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent-&gt;<ref refid="structpcb_1a05ac392d4980070cd3883bed31d16988" kindref="member">cursor_y</ref><sp/>&lt;<sp/>target-&gt;<ref refid="structpcb_1a05ac392d4980070cd3883bed31d16988" kindref="member">cursor_y</ref>)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;<ref refid="structpcb_1a05ac392d4980070cd3883bed31d16988" kindref="member">cursor_y</ref><sp/>=<sp/>target-&gt;<ref refid="structpcb_1a05ac392d4980070cd3883bed31d16988" kindref="member">cursor_y</ref>;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>k_pcb_unblock(&amp;(target-&gt;wait_list),<sp/>&amp;ready_queue,<sp/>UNBLOCK_TO_LIST_STRATEGY);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>target-&gt;<ref refid="structpcb_1a1da0b84097537a6227022e4328977916" kindref="member">pid</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>target-&gt;<ref refid="structpcb_1ac727b3a53fceae0d702663b5e6690105" kindref="member">status</ref><sp/>=<sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba64d5f8a2cf37ebdf772858331e82a54a" kindref="member">TASK_EXITED</ref>;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structpcb" kindref="compound">pcb</ref>[pid].<ref refid="fat32_8h_1a1d127017fb298b889f4ba24752d08b8e" kindref="member">type</ref><sp/>!=<sp/><ref refid="pcb_8h_1ab8d9e3d1f9fdf95a31d7b4ce32768eabacde3f46d6fbc48d008dff6af3e00cc11" kindref="member">USER_THREAD</ref>)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mm_8h_1a8197dbf98089500838012155e374ac8b" kindref="member">k_mm_getback_page</ref>(pid);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>give<sp/>up<sp/>its<sp/>sons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="pcb_8h_1aa2b9c743d2373fe9432fccc8fd645f78" kindref="member">NUM_MAX_TASK</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structpcb" kindref="compound">pcb</ref>[i].father_pid<sp/>==<sp/>pid)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[i].<ref refid="structpcb_1a231eaf6e04f879192b2fa61bc4665dde" kindref="member">father_pid</ref><sp/>=<sp/>target-&gt;<ref refid="structpcb_1a231eaf6e04f879192b2fa61bc4665dde" kindref="member">father_pid</ref>;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target-&gt;<ref refid="structpcb_1a120965426502b0d148c111eacb5d420b" kindref="member">list</ref>.<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;target-&gt;<ref refid="structpcb_1a120965426502b0d148c111eacb5d420b" kindref="member">list</ref>);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>target-&gt;<ref refid="structpcb_1af06a1a97b569274bfe7531ee9b323aff" kindref="member">exit_status</ref><sp/>=<sp/>exit_status;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>target-&gt;<ref refid="structpcb_1a1da0b84097537a6227022e4328977916" kindref="member">pid</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1ab6bb3d2baf7ab70bf6e832bba98c5e31" kindref="member">sys_kill</ref>(<ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref><sp/>pid)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pid<sp/>&lt;=<sp/>0<sp/>||<sp/>pid<sp/>&gt;=<sp/><ref refid="pcb_8h_1aa2b9c743d2373fe9432fccc8fd645f78" kindref="member">NUM_MAX_TASK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="errno_8h_1a2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1aa8bc378bc7bc365ecccceb9809105f89" kindref="member">kill</ref>(pid,<sp/>-1);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[pid].<ref refid="structpcb_1aeab75f925365bc4d7a91d2e86e16108b" kindref="member">in_use</ref><sp/>=<sp/><ref refid="types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pid<sp/>==<sp/>(*current_running)-&gt;pid)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1ab235dcbe70f00d25d99f6d0bce4ec087" kindref="member">k_pcb_scheduler</ref>();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1aa97ee001038378e557b20535e2347aed" kindref="member">sys_exit</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="smp_8h_1af01b72c2ec67649abee4185ad9d9fa34" kindref="member">k_smp_get_current_cpu_id</ref>();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1aa8bc378bc7bc365ecccceb9809105f89" kindref="member">kill</ref>((*current_running)-&gt;pid,<sp/>error_code);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a83f38b8c9da23021ed61d4031ab5aad3" kindref="member">current_running0</ref><sp/>=<sp/>&amp;<ref refid="pcb_8c_1aaefceaf10125be70ceac97d46a4f2bc3" kindref="member">pid0_pcb</ref>;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a5f57f427e7da8049da09de558fc72e2d" kindref="member">current_running1</ref><sp/>=<sp/>&amp;<ref refid="pcb_8c_1a8176d551abe4fa60c56659184e032ab0" kindref="member">pid0_pcb2</ref>;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a775dd48cd2188c627cbdd19b03b37212" kindref="member">current_running</ref><sp/>=<sp/><ref refid="smp_8h_1ad31b9c256d6f7d32ec99b5f892f40c8c" kindref="member">k_smp_get_current_running</ref>();</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>set_satp(<ref refid="pgtable_8h_1a8b39454e1fcc5204db5a6772f73bc6a1" kindref="member">SATP_MODE_SV39</ref>,<sp/>0,<sp/><ref refid="pgtable_8h_1aedc2ac196557ee36b7a3f9051e008a63" kindref="member">PGDIR_PA</ref><sp/>&gt;&gt;<sp/><ref refid="pgtable_8h_1a7fe96413b980b8b6c52da8ebb14154e8" kindref="member">NORMAL_PAGE_SHIFT</ref>);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>local_flush_tlb_all();</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1ab235dcbe70f00d25d99f6d0bce4ec087" kindref="member">k_pcb_scheduler</ref>();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a5ac8dc14c787aa11829c507e87c9b908" kindref="member">sys_wait4</ref>(<ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref><sp/>pid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*stat_addr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>options,<sp/><ref refid="structrusage" kindref="compound">rusage_t</ref><sp/>*ru)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb_t</ref><sp/>*target<sp/>=<sp/><ref refid="types_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wait_pid<sp/>=<sp/>-1,<sp/>pid_i<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pid<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/>&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[pid];</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait_pid<sp/>=<sp/>pid;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="pcb_8h_1ad907dc7ff26c1a93783a8d9acb32b5d4" kindref="member">NUM_MAX_CHILD</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*current_running)-&gt;child_pids[i]<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pid_i<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait_pid<sp/>=<sp/>(*current_running)-&gt;<ref refid="structpcb_1a0c21f904d8f109d1fcb20085141b5919" kindref="member">child_pids</ref>[i];</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/>&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[wait_pid];</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!target-&gt;<ref refid="structpcb_1aeab75f925365bc4d7a91d2e86e16108b" kindref="member">in_use</ref>)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wait_pid;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>child<sp/>process,<sp/>but<sp/>wait</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wait_pid<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(target-&gt;<ref refid="structpcb_1ac727b3a53fceae0d702663b5e6690105" kindref="member">status</ref><sp/>!=<sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba64d5f8a2cf37ebdf772858331e82a54a" kindref="member">TASK_EXITED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a46a988dfd7b1038c6ba7f97ec2a7c4f4" kindref="member">k_pcb_block</ref>(&amp;(*current_running)-&gt;list,<sp/>&amp;<ref refid="pcb_8h_1a2faf8a6ddc84222929f0f6ef1a192537" kindref="member">block_queue</ref>,<sp/><ref refid="pcb_8h_1a63b43285903b7693f45e3699209d02eaa5c6945e962fca284e243730269169d5e" kindref="member">ENQUEUE_LIST</ref>);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1ab235dcbe70f00d25d99f6d0bce4ec087" kindref="member">k_pcb_scheduler</ref>();</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[wait_pid];</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target-&gt;<ref refid="structpcb_1aeab75f925365bc4d7a91d2e86e16108b" kindref="member">in_use</ref>)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;<ref refid="structpcb_1ac727b3a53fceae0d702663b5e6690105" kindref="member">status</ref><sp/>=<sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba64d5f8a2cf37ebdf772858331e82a54a" kindref="member">TASK_EXITED</ref>;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;<ref refid="structpcb_1aeab75f925365bc4d7a91d2e86e16108b" kindref="member">in_use</ref><sp/>=<sp/><ref refid="types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*current_running)-&gt;child_pids[pid_i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stat_addr)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stat_addr<sp/>=<sp/>(target-&gt;<ref refid="structpcb_1af06a1a97b569274bfe7531ee9b323aff" kindref="member">exit_status</ref><sp/>&lt;&lt;<sp/>8);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ru)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1a4985196d8a63d22e320cf33d904d2f92" kindref="member">k_memcpy</ref>((uint8_t<sp/>*)ru,<sp/>(uint8_t<sp/>*)&amp;target-&gt;<ref refid="structpcb_1afd18b6c3c18534c5587abce4cde24974" kindref="member">resources</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrusage" kindref="compound">rusage_t</ref>));</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wait_pid;</highlight></codeline>
<codeline lineno="548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a70451e498144bba3b0eda268e137e3e8" kindref="member">sys_process_show</ref>()<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="pcb_8h_1aa2b9c743d2373fe9432fccc8fd645f78" kindref="member">NUM_MAX_TASK</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structpcb" kindref="compound">pcb</ref>[i].status<sp/>!=<sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba64d5f8a2cf37ebdf772858331e82a54a" kindref="member">TASK_EXITED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdio_8h_1a6538261d9c511ed65721af147c6c38ec" kindref="member">prints</ref>(</highlight><highlight class="stringliteral">&quot;\n[PROCESS<sp/>TABLE]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdio_8h_1a6538261d9c511ed65721af147c6c38ec" kindref="member">prints</ref>(</highlight><highlight class="stringliteral">&quot;[%d]<sp/>PID<sp/>:<sp/>%d,<sp/>TID<sp/>:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>num,<sp/><ref refid="structpcb" kindref="compound">pcb</ref>[i].fpid,</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[i].tid);<sp/></highlight><highlight class="comment">//<sp/>pcb[i].tid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="structpcb" kindref="compound">pcb</ref>[i].status)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba9bd2895158d9e7c8cf80b57659fcba50" kindref="member">TASK_RUNNING</ref>:</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="screen_8c_1a3fcf46e5b64442d02d975f629d297ebb" kindref="member">sys_screen_write</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>STATUS<sp/>:<sp/>RUNNING&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba108284117a3f463352658a08930a3888" kindref="member">TASK_BLOCKED</ref>:</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="screen_8c_1a3fcf46e5b64442d02d975f629d297ebb" kindref="member">sys_screen_write</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>STATUS<sp/>:<sp/>BLOCKED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4baebcd951a6127c3c50a4f197b2b637793" kindref="member">TASK_READY</ref>:</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="screen_8c_1a3fcf46e5b64442d02d975f629d297ebb" kindref="member">sys_screen_write</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>STATUS<sp/>:<sp/>READY&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba64d5f8a2cf37ebdf772858331e82a54a" kindref="member">TASK_EXITED</ref>:</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="screen_8c_1a3fcf46e5b64442d02d975f629d297ebb" kindref="member">sys_screen_write</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>STATUS<sp/>:<sp/>EXITED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdio_8h_1a6538261d9c511ed65721af147c6c38ec" kindref="member">prints</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>MASK<sp/>:<sp/>0x%x&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="structpcb" kindref="compound">pcb</ref>[i].core_mask[0]);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structpcb" kindref="compound">pcb</ref>[i].status<sp/>==<sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba9bd2895158d9e7c8cf80b57659fcba50" kindref="member">TASK_RUNNING</ref>)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="screen_8c_1a3fcf46e5b64442d02d975f629d297ebb" kindref="member">sys_screen_write</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>on<sp/>Core<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="structpcb" kindref="compound">pcb</ref>[i].core_mask[0])<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="screen_8c_1a3fcf46e5b64442d02d975f629d297ebb" kindref="member">sys_screen_write</ref>(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="screen_8c_1a3fcf46e5b64442d02d975f629d297ebb" kindref="member">sys_screen_write</ref>(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[i]<sp/>==<sp/><ref refid="pcb_8c_1a83f38b8c9da23021ed61d4031ab5aad3" kindref="member">current_running0</ref>)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="screen_8c_1a3fcf46e5b64442d02d975f629d297ebb" kindref="member">sys_screen_write</ref>(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[i]<sp/>==<sp/><ref refid="pcb_8c_1a5f57f427e7da8049da09de558fc72e2d" kindref="member">current_running1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="screen_8c_1a3fcf46e5b64442d02d975f629d297ebb" kindref="member">sys_screen_write</ref>(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sys_screen_write(&quot;\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a48df026a75ef8566304e110b6d17c97a" kindref="member">exec</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>target_pid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>father_pid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*envp[])<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a37c23b4e8693e6faad0735841ab5f529" kindref="member">init_pcb_i</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)file_name,<sp/>target_pid,<sp/><ref refid="pcb_8h_1ab8d9e3d1f9fdf95a31d7b4ce32768eaba73247b7900083fb57378cfc9ef9a3172" kindref="member">USER_PROCESS</ref>,<sp/>target_pid,<sp/>target_pid,<sp/>0,<sp/>father_pid,<sp/>(*current_running)-&gt;core_mask[0]);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref><sp/>kernel_stack<sp/>=<sp/><ref refid="stack_8h_1ad72f726c9f29ef22f7a26cdf0fd601ef" kindref="member">get_kernel_address</ref>(target_pid);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref><sp/>user_stack_kva<sp/>=<sp/>kernel_stack<sp/>-<sp/>4<sp/>*<sp/><ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref>;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref><sp/>user_stack<sp/>=<sp/><ref refid="mm_8h_1a1c61109160d8b25e154f4334c2a3d1d8" kindref="member">USER_STACK_ADDR</ref>;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>k_mm_getback_page(target_pid);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pgtable_8h_1a84884de9218381c7120044a50c84eeba" kindref="member">PTE</ref><sp/>*pgdir<sp/>=<sp/>(<ref refid="pgtable_8h_1a84884de9218381c7120044a50c84eeba" kindref="member">PTE</ref><sp/>*)<ref refid="mm_8h_1a15a9cb45278812554529da95588e9209" kindref="member">k_mm_alloc_page</ref>(1);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pgtable_8h_1a16a05e338bbca3bb0626f91e032ac94c" kindref="member">clear_pgdir</ref>((<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref>)pgdir);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mm_8h_1aed1b9a35c0f6f6039f48c12957dfccb1" kindref="member">k_mm_share_pgtable</ref>(pgdir,<sp/>pa2kva(<ref refid="pgtable_8h_1aedc2ac196557ee36b7a3f9051e008a63" kindref="member">PGDIR_PA</ref>));</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[target_pid].<ref refid="structpcb_1a4c9597d737c8e1674c2f844b76b10aeb" kindref="member">pgdir</ref><sp/>=<sp/>kva2pa((<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref>)pgdir)<sp/>&gt;&gt;<sp/><ref refid="pgtable_8h_1a7fe96413b980b8b6c52da8ebb14154e8" kindref="member">NORMAL_PAGE_SHIFT</ref>;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*binary<sp/>=<sp/><ref refid="types_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>get_elf_file(file_name,<sp/>&amp;binary,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8h_1a5410d43bb81d9e035039cdc3ce2484be" kindref="member">void_task</ref><sp/>process<sp/>=<sp/>(<ref refid="pcb_8h_1a5410d43bb81d9e035039cdc3ce2484be" kindref="member">void_task</ref>)<ref refid="elf_8h_1a2d042539a0bd432f89e5ae93e1bb2f64" kindref="member">load_elf</ref>(binary,<sp/>len,<sp/>(<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref>)pgdir,<sp/>(<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref>(*)(<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref>,<sp/><ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref>))<ref refid="mm_8h_1a0ac89a697d37de67b2f7a8861c3a1e8e" kindref="member">k_mm_alloc_page_helper</ref>);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mm_8h_1a88dba7dbe2c5f022becc2615e51fc92f" kindref="member">k_mm_map</ref>(<ref refid="mm_8h_1a1c61109160d8b25e154f4334c2a3d1d8" kindref="member">USER_STACK_ADDR</ref><sp/>-<sp/><ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref>,<sp/>kva2pa(user_stack_kva<sp/>-<sp/><ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref>),<sp/>pgdir);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>k_mm_map(USER_STACK_ADDR,<sp/>kva2pa(user_stack_kva),<sp/>pgdir);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[target_pid].pgdir<sp/>=<sp/>kva2pa((<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref>)pgdir)<sp/>&gt;&gt;<sp/><ref refid="pgtable_8h_1a7fe96413b980b8b6c52da8ebb14154e8" kindref="member">NORMAL_PAGE_SHIFT</ref>;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc<sp/>=<sp/><ref refid="string_8h_1aac6baff2271e498b362a65320c5d5941" kindref="member">k_strlistlen</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)argv);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>envpc<sp/>=<sp/><ref refid="string_8h_1aac6baff2271e498b362a65320c5d5941" kindref="member">k_strlistlen</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)envp);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref><sp/>child_argv<sp/>=<sp/><ref refid="pcb_8c_1af74e7a9700d18dd99ffa77cd66f87646" kindref="member">init_user_stack</ref>(&amp;user_stack_kva,<sp/>&amp;user_stack,<sp/>argc,<sp/>argv,<sp/>envpc,<sp/>envp,<sp/>file_name);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a4619d60667f4a7c84a28f9cd741f7ba4" kindref="member">init_context_stack</ref>(kernel_stack,<sp/>user_stack,<sp/>argc,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)child_argv,<sp/>(<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref>)process,<sp/>&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[target_pid]);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>list_add_tail(&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[target_pid].list,<sp/>&amp;<ref refid="pcb_8h_1a58658ee7ac1edae4ef80e87071be6b3d" kindref="member">ready_queue</ref>);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>target_pid;</highlight></codeline>
<codeline lineno="632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a6f26d791d6f69063f9ea40becd52e9f5" kindref="member">sys_exec</ref>(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file_name,<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[],<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*envp[])<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a48df026a75ef8566304e110b6d17c97a" kindref="member">exec</ref>(<ref refid="pcb_8c_1aa270cdccfc324df6feafe55e26b74a64" kindref="member">nextpid</ref>(),<sp/>(*current_running)-&gt;pid,<sp/>file_name,<sp/>argv,<sp/>envp);</highlight></codeline>
<codeline lineno="636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1ae34299981375e7a3b8f691b4137a8213" kindref="member">sys_execve</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*envp[])<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="pcb_8c_1a48df026a75ef8566304e110b6d17c97a" kindref="member">exec</ref>((*current_running)-&gt;pid,<sp/>(*current_running)-&gt;father_pid,<sp/>file_name,<sp/>argv,<sp/>envp);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1ab235dcbe70f00d25d99f6d0bce4ec087" kindref="member">k_pcb_scheduler</ref>();</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a6edad7da8809383ab626e5de7e3215a6" kindref="member">clone</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stack,<sp/><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref><sp/>*parent_tid,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*tls,<sp/><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref><sp/>*child_tid)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="pcb_8c_1aa270cdccfc324df6feafe55e26b74a64" kindref="member">nextpid</ref>();</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref><sp/>fpid<sp/>=<sp/>(*current_running)-&gt;pid;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name[<ref refid="pcb_8h_1a9bdec823ad2bc9c3dbe8c3c96e3f9637" kindref="member">NUM_MAX_PCB_NAME</ref>]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>name_len<sp/>=<sp/><ref refid="math_8h_1a546f06262919d41fdb238bb26548cdd5" kindref="member">k_min</ref>(<ref refid="string_8h_1ae096c40164c6e072e600751bd7151fb9" kindref="member">k_strlen</ref>((*current_running)-&gt;name),<sp/>14);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a4985196d8a63d22e320cf33d904d2f92" kindref="member">k_memcpy</ref>((uint8_t<sp/>*)name,<sp/>(uint8_t<sp/>*)(*current_running)-&gt;name,<sp/>name_len);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a3ffa6c0492a0ff6b656c748a32e1bfcf" kindref="member">k_strcat</ref>(name,<sp/></highlight><highlight class="stringliteral">&quot;_child&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a37c23b4e8693e6faad0735841ab5f529" kindref="member">init_pcb_i</ref>(name,<sp/>i,<sp/><ref refid="pcb_8h_1ab8d9e3d1f9fdf95a31d7b4ce32768eaba73247b7900083fb57378cfc9ef9a3172" kindref="member">USER_PROCESS</ref>,<sp/>i,<sp/>i,<sp/>0,<sp/>fpid,<sp/>(*current_running)-&gt;core_mask[0]);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="pcb_8h_1a816767a2cd31aaac3573d5bd6e32871c" kindref="member">CLONE_CHILD_SETTID</ref>)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)child_tid<sp/>=<sp/><ref refid="structpcb" kindref="compound">pcb</ref>[i].tid;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="pcb_8h_1a1373b97ed9463892bebd97c564905043" kindref="member">CLONE_PARENT_SETTID</ref>)<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)parent_tid<sp/>=<sp/><ref refid="structpcb" kindref="compound">pcb</ref>[i].tid;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="pcb_8h_1a79914877b533fca7fbdb319640b42add" kindref="member">CLONE_CHILD_CLEARTID</ref>)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[i].<ref refid="structpcb_1af39cf8644c1cdb46a475927d7937b204" kindref="member">clear_ctid</ref><sp/>=<sp/>(uint32_t<sp/>*)child_tid;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[fpid].<ref refid="structpcb_1a0c21f904d8f109d1fcb20085141b5919" kindref="member">child_pids</ref>[<ref refid="structpcb" kindref="compound">pcb</ref>[fpid].<ref refid="structpcb_1a5add1aa788bd688a674d39b5cd859cb3" kindref="member">child_num</ref>]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[fpid].<ref refid="structpcb_1a5add1aa788bd688a674d39b5cd859cb3" kindref="member">child_num</ref>++;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref><sp/>kernel_stack_kva<sp/>=<sp/><ref refid="stack_8h_1ad72f726c9f29ef22f7a26cdf0fd601ef" kindref="member">get_kernel_address</ref>(i);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref><sp/>user_stack_kva<sp/>=<sp/>kernel_stack_kva<sp/>-<sp/>4<sp/>*<sp/><ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref>;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="pcb_8h_1ac07965af2ad895ca67fdc8352303fbb5" kindref="member">CLONE_VM</ref>)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[i].<ref refid="structpcb_1a4c9597d737c8e1674c2f844b76b10aeb" kindref="member">pgdir</ref><sp/>=<sp/>(*current_running)-&gt;pgdir;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pgtable_8h_1a84884de9218381c7120044a50c84eeba" kindref="member">PTE</ref><sp/>*pgdir<sp/>=<sp/>(<ref refid="pgtable_8h_1a84884de9218381c7120044a50c84eeba" kindref="member">PTE</ref><sp/>*)<ref refid="mm_8h_1a15a9cb45278812554529da95588e9209" kindref="member">k_mm_alloc_page</ref>(1);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pgtable_8h_1a16a05e338bbca3bb0626f91e032ac94c" kindref="member">clear_pgdir</ref>((<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref>)pgdir);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mm_8h_1adad693c99d9b33d077b78a75aa5201ce" kindref="member">k_mm_fork_pgtable</ref>(pgdir,<sp/>(pa2kva((*current_running)-&gt;pgdir<sp/>&lt;&lt;<sp/><ref refid="pgtable_8h_1a7fe96413b980b8b6c52da8ebb14154e8" kindref="member">NORMAL_PAGE_SHIFT</ref>)));</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mm_8h_1aed1b9a35c0f6f6039f48c12957dfccb1" kindref="member">k_mm_share_pgtable</ref>(pgdir,<sp/>pa2kva(<ref refid="pgtable_8h_1aedc2ac196557ee36b7a3f9051e008a63" kindref="member">PGDIR_PA</ref>));</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpcb" kindref="compound">pcb</ref>[i].<ref refid="structpcb_1a4c9597d737c8e1674c2f844b76b10aeb" kindref="member">pgdir</ref><sp/>=<sp/>kva2pa((<ref refid="types_8h_1ad6cb5da84246290b3d730166b020f2a8" kindref="member">uintptr_t</ref>)pgdir)<sp/>&gt;&gt;<sp/><ref refid="pgtable_8h_1a7fe96413b980b8b6c52da8ebb14154e8" kindref="member">NORMAL_PAGE_SHIFT</ref>;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a4985196d8a63d22e320cf33d904d2f92" kindref="member">k_memcpy</ref>((uint8_t<sp/>*)&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[i].elf,<sp/>(uint8_t<sp/>*)&amp;(*current_running)-&gt;<ref refid="structpcb_1a9e01b0ed9228b750263cceb10b9cb95c" kindref="member">elf</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structELF__info" kindref="compound">ELF_info_t</ref>));</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a4985196d8a63d22e320cf33d904d2f92" kindref="member">k_memcpy</ref>((uint8_t<sp/>*)(user_stack_kva<sp/>-<sp/><ref refid="pgtable_8h_1a4d79b19c57b121d211b145092347ae82" kindref="member">NORMAL_PAGE_SIZE</ref>),<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*)(<ref refid="math_8h_1ae01e61de3f261813f8be774741e3eb0a" kindref="member">K_ROUNDDOWN</ref>((*current_running)-&gt;user_sp,<sp/><ref refid="pgtable_8h_1a4d79b19c57b121d211b145092347ae82" kindref="member">NORMAL_PAGE_SIZE</ref>)),<sp/><ref refid="pgtable_8h_1a4d79b19c57b121d211b145092347ae82" kindref="member">NORMAL_PAGE_SIZE</ref>);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref><sp/>user_stack<sp/>=<sp/>(<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref>)stack<sp/>?<sp/>(<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref>)stack<sp/>:<sp/><ref refid="mm_8h_1a1c61109160d8b25e154f4334c2a3d1d8" kindref="member">USER_STACK_ADDR</ref>;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ptr_t<sp/>user_stack<sp/>=<sp/>USER_STACK_ADDR;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a858d10edc3b587179159d2e575df5ebb" kindref="member">clone_pcb_stack</ref>(kernel_stack_kva,<sp/>user_stack,<sp/>&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[i],<sp/>flags,<sp/>tls);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stack)<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mm_8h_1a88dba7dbe2c5f022becc2615e51fc92f" kindref="member">k_mm_map</ref>(<ref refid="mm_8h_1a1c61109160d8b25e154f4334c2a3d1d8" kindref="member">USER_STACK_ADDR</ref><sp/>-<sp/><ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref>,<sp/>kva2pa(user_stack_kva<sp/>-<sp/><ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref>),<sp/>pa2kva(<ref refid="structpcb" kindref="compound">pcb</ref>[i].pgdir<sp/>&lt;&lt;<sp/><ref refid="pgtable_8h_1a7fe96413b980b8b6c52da8ebb14154e8" kindref="member">NORMAL_PAGE_SHIFT</ref>));</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>list_add_tail(&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[i].list,<sp/>&amp;<ref refid="pcb_8h_1a58658ee7ac1edae4ef80e87071be6b3d" kindref="member">ready_queue</ref>);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1afe960c5f4c95cd9efa9f058741d089fa" kindref="member">sys_clone</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stack,<sp/><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref><sp/>*parent_tid,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*tls,<sp/><ref refid="types_8h_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref><sp/>*child_tid)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a6edad7da8809383ab626e5de7e3215a6" kindref="member">clone</ref>(flags,<sp/>stack,<sp/>parent_tid,<sp/>tls,<sp/>child_tid);<sp/></highlight></codeline>
<codeline lineno="700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a4b625fcec2c1e98ec22be164cd02315c" kindref="member">k_pcb_getpid</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*current_running)-&gt;fpid;</highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a158d77445e5c6edc4cd573ec270676e6" kindref="member">sys_getpid</ref>()<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a4b625fcec2c1e98ec22be164cd02315c" kindref="member">k_pcb_getpid</ref>();</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a9de10a9f1ad63fb9772b41410dbd9766" kindref="member">sys_getppid</ref>()<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*current_running)-&gt;father_pid<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a5111ec3b899498d5951050cd72bfe21b" kindref="member">k_pcb_sleep</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*chan,<sp/><ref refid="structspin__lock" kindref="compound">spin_lock_t</ref><sp/>*lk)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lock_8h_1a25c026e475e11a6e312925223a3e9d34" kindref="member">k_spin_lock_release</ref>(lk);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>(*current_running)-&gt;chan<sp/>=<sp/>chan;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a46a988dfd7b1038c6ba7f97ec2a7c4f4" kindref="member">k_pcb_block</ref>(&amp;(*current_running)-&gt;list,<sp/>&amp;<ref refid="pcb_8h_1a2faf8a6ddc84222929f0f6ef1a192537" kindref="member">block_queue</ref>,<sp/><ref refid="pcb_8h_1a63b43285903b7693f45e3699209d02eaa5c6945e962fca284e243730269169d5e" kindref="member">ENQUEUE_LIST</ref>);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1ab235dcbe70f00d25d99f6d0bce4ec087" kindref="member">k_pcb_scheduler</ref>();</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>(*current_running)-&gt;chan<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lock_8h_1aa8b07da1c0d3b17f49429722404c9649" kindref="member">k_spin_lock_acquire</ref>(lk);</highlight></codeline>
<codeline lineno="731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a2d546871750b175deb1f3c0279c64e3f" kindref="member">k_pcb_wakeup</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*chan)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="pcb_8h_1a03193ee70511b814eb5ff595a92b6dd7" kindref="member">NUM_MAX_PROCESS</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="structpcb" kindref="compound">pcb</ref>[i].status<sp/>==<sp/><ref refid="pcb_8h_1a095fa726e901542e80da596043d07e4ba108284117a3f463352658a08930a3888" kindref="member">TASK_BLOCKED</ref>)<sp/>&amp;&amp;<sp/>(<ref refid="structpcb" kindref="compound">pcb</ref>[i].chan<sp/>==<sp/>chan))<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a3534b2b27aeed25d68791f153d794810" kindref="member">k_pcb_unblock</ref>(&amp;<ref refid="structpcb" kindref="compound">pcb</ref>[i].list,<sp/>&amp;<ref refid="pcb_8h_1a58658ee7ac1edae4ef80e87071be6b3d" kindref="member">ready_queue</ref>,<sp/><ref refid="pcb_8h_1a88409d37561d84ec48058b9f84bb3d5eae79cd7b408cb9c190ad524869ef00c14" kindref="member">UNBLOCK_TO_LIST_STRATEGY</ref>);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/kernel/sys/pcb.c"/>
  </compounddef>
</doxygen>
