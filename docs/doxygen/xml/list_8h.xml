<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="zh">
  <compounddef id="list_8h" kind="file" language="C++">
    <compoundname>list.h</compoundname>
    <includes refid="types_8h" local="no">common/types.h</includes>
    <includedby refid="file_8h" local="no">src/fs/file.h</includedby>
    <includedby refid="lock_8h" local="no">src/include/os/lock.h</includedby>
    <includedby refid="pcb_8h" local="no">src/include/os/pcb.h</includedby>
    <includedby refid="sync_8h" local="no">src/include/os/sync.h</includedby>
    <includedby refid="time_8h" local="no">src/include/os/time.h</includedby>
    <includedby refid="irq_8c" local="no">src/kernel/irq/irq.c</includedby>
    <includedby refid="time_8c" local="no">src/kernel/sys/time.c</includedby>
    <incdepgraph>
      <node id="3">
        <label>common/errno.h</label>
        <link refid="errno_8h"/>
      </node>
      <node id="2">
        <label>common/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/include/lib/list.h</label>
        <link refid="list_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>src/fs/fs.c</label>
        <link refid="fs_8c"/>
      </node>
      <node id="24">
        <label>src/kernel/sync/lock.c</label>
        <link refid="lock_8c"/>
      </node>
      <node id="8">
        <label>src/drivers/plic/plic.c</label>
        <link refid="plic_8c"/>
      </node>
      <node id="18">
        <label>src/kernel/sys/smp.c</label>
        <link refid="smp_8c"/>
      </node>
      <node id="16">
        <label>src/drivers/screen/screen.c</label>
        <link refid="screen_8c"/>
      </node>
      <node id="19">
        <label>src/lib/printk.c</label>
        <link refid="printk_8c"/>
      </node>
      <node id="25">
        <label>src/kernel/sync/sync.c</label>
        <link refid="sync_8c"/>
      </node>
      <node id="15">
        <label>src/kernel/sys/pcb.c</label>
        <link refid="pcb_8c"/>
      </node>
      <node id="10">
        <label>src/include/os/syscall.h</label>
        <link refid="include_2os_2syscall_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/drivers/virtio/virtio.h</label>
        <link refid="virtio_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>src/include/os/time.h</label>
        <link refid="time_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>src/kernel/sys/time.c</label>
        <link refid="time_8c"/>
      </node>
      <node id="5">
        <label>src/init/main.c</label>
        <link refid="main_8c"/>
      </node>
      <node id="11">
        <label>src/kernel/irq/irq.c</label>
        <link refid="irq_8c"/>
      </node>
      <node id="17">
        <label>src/include/os/irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>src/kernel/mm/mm.c</label>
        <link refid="mm_8c"/>
      </node>
      <node id="21">
        <label>src/arch/riscv/sbi/io.c</label>
        <link refid="io_8c"/>
      </node>
      <node id="20">
        <label>src/include/os/smp.h</label>
        <link refid="smp_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>src/drivers/virtio/virtio_blk.c</label>
        <link refid="virtio__blk_8c"/>
      </node>
      <node id="13">
        <label>src/arch/riscv/include/asm/stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>src/include/os/pcb.h</label>
        <link refid="pcb_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/fs/fd.c</label>
        <link refid="fd_8c"/>
      </node>
      <node id="2">
        <label>src/fs/file.h</label>
        <link refid="file_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>src/arch/riscv/kernel/init/stack.c</label>
        <link refid="stack_8c"/>
      </node>
      <node id="6">
        <label>src/include/os/lock.h</label>
        <link refid="lock_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>src/include/os/sync.h</label>
        <link refid="sync_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/include/lib/list.h</label>
        <link refid="list_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structlist__node" prot="public">list_node</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="list_8h_1a4642d4b7df28478bb762fe43c85b5c63" prot="public" static="no">
        <name>LIST_HEAD_INIT</name>
        <param><defname>name</defname></param>
        <initializer>{ &amp;(name), &amp;(name) }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="13" column="9" bodyfile="src/include/lib/list.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="list_8h_1a42f0e72af970a790b60a740af8c9ecd0" prot="public" static="no">
        <name>LIST_HEAD</name>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> name = <ref refid="list_8h_1a4642d4b7df28478bb762fe43c85b5c63" kindref="member">LIST_HEAD_INIT</ref>(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="15" column="9" bodyfile="src/include/lib/list.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="list_8h_1a276e8a32e0bbf024aadd9420b8f2d3b3" prot="public" static="no">
        <name>offsetof</name>
        <param><defname>TYPE</defname></param>
        <param><defname>MEMBER</defname></param>
        <initializer>((<ref refid="types_8h_1afeaa5ef46acd844422607ca6602691ef" kindref="member">size_t</ref>) &amp;((TYPE *)0)-&gt;MEMBER)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="18" column="9" bodyfile="src/include/lib/list.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="list_8h_1af8c317a42292b61c93aae91e59118a46" prot="public" static="no">
        <name>container_of</name>
        <param><defname>ptr</defname></param>
        <param><defname>type</defname></param>
        <param><defname>member</defname></param>
        <initializer>    ({          \
    const typeof( ((<ref refid="fat32_8h_1a1d127017fb298b889f4ba24752d08b8e" kindref="member">type</ref> *)0)-&gt;member ) *__mptr = (ptr);    \
    (<ref refid="fat32_8h_1a1d127017fb298b889f4ba24752d08b8e" kindref="member">type</ref> *)( (char *)__mptr - <ref refid="list_8h_1a276e8a32e0bbf024aadd9420b8f2d3b3" kindref="member">offsetof</ref>(<ref refid="fat32_8h_1a1d127017fb298b889f4ba24752d08b8e" kindref="member">type</ref>,member) );})</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="20" column="9" bodyfile="src/include/lib/list.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="list_8h_1a26c976b7f654e70df318c1843e5094de" prot="public" static="no">
        <name>list_entry</name>
        <param><defname>ptr</defname></param>
        <param><defname>type</defname></param>
        <param><defname>member</defname></param>
        <initializer>	<ref refid="list_8h_1af8c317a42292b61c93aae91e59118a46" kindref="member">container_of</ref>(ptr, <ref refid="fat32_8h_1a1d127017fb298b889f4ba24752d08b8e" kindref="member">type</ref>, member)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="25" column="9" bodyfile="src/include/lib/list.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="list_8h_1a865bd3b3cd44b1d8f1d63746748fa807" prot="public" static="no">
        <type>struct <ref refid="structlist__node" kindref="compound">list_node</ref></type>
        <definition>typedef struct list_node list_node_t</definition>
        <argsstring></argsstring>
        <name>list_node_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="9" column="13"/>
      </memberdef>
      <memberdef kind="typedef" id="list_8h_1aa8e63a505e811a76625c05760bb04f7f" prot="public" static="no">
        <type><ref refid="list_8h_1a865bd3b3cd44b1d8f1d63746748fa807" kindref="member">list_node_t</ref></type>
        <definition>typedef list_node_t list_head</definition>
        <argsstring></argsstring>
        <name>list_head</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="11" column="21" bodyfile="src/include/lib/list.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="list_8h_1ab352879e4d2e0da053a774a138feb7bc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void init_list_head</definition>
        <argsstring>(list_head *list)</argsstring>
        <name>init_list_head</name>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="28" column="20" bodyfile="src/include/lib/list.h" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1a94ac617fbd87b9f206b9d01fc383f3e9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void list_init_with_null</definition>
        <argsstring>(list_head *list)</argsstring>
        <name>list_init_with_null</name>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="34" column="20" bodyfile="src/include/lib/list.h" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1abab8621ea06392cc93df7c9a3c3d6169" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void __list_add</definition>
        <argsstring>(list_head *new, list_head *prev, list_head *next)</argsstring>
        <name>__list_add</name>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>new</declname>
        </param>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>prev</declname>
        </param>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>next</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="40" column="20" bodyfile="src/include/lib/list.h" bodystart="40" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1a5ed0c181b01b08416d0184accd0d5d24" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void list_add</definition>
        <argsstring>(list_head *new, list_head *head)</argsstring>
        <name>list_add</name>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>new</declname>
        </param>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>head</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="48" column="20" bodyfile="src/include/lib/list.h" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1a2c31ac545db5f23c88daf056eb5ef33a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void list_add_tail</definition>
        <argsstring>(list_head *new, list_head *head)</argsstring>
        <name>list_add_tail</name>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>new</declname>
        </param>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>head</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="53" column="20" bodyfile="src/include/lib/list.h" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1a82e39c2a6f711635332c7d658d3daa7d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void __list_del</definition>
        <argsstring>(list_head *prev, list_head *next)</argsstring>
        <name>__list_del</name>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>prev</declname>
        </param>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>next</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="59" column="20" bodyfile="src/include/lib/list.h" bodystart="59" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1a79291d70accb6cf6aab270af6e280cf2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void __list_del_entry</definition>
        <argsstring>(list_head *entry)</argsstring>
        <name>__list_del_entry</name>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="65" column="20" bodyfile="src/include/lib/list.h" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1aa1161013dbcdb77f765ab8445b61acea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void list_del</definition>
        <argsstring>(list_head *entry)</argsstring>
        <name>list_del</name>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="70" column="20" bodyfile="src/include/lib/list.h" bodystart="70" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1a66a5a1bab5658e30e9b724ccc14be4a4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void list_move</definition>
        <argsstring>(list_head *list, list_head *head)</argsstring>
        <name>list_move</name>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>head</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="77" column="20" bodyfile="src/include/lib/list.h" bodystart="77" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1ac7a86cc0cab06636027fc1d560611d47" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void list_move_tail</definition>
        <argsstring>(list_head *list, list_head *head)</argsstring>
        <name>list_move_tail</name>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>head</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="83" column="20" bodyfile="src/include/lib/list.h" bodystart="83" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1a8a0cab45352737c39d3185e3a9b0ec78" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int list_is_first</definition>
        <argsstring>(list_head *list, const list_head *head)</argsstring>
        <name>list_is_first</name>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const <ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>head</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="91" column="19" bodyfile="src/include/lib/list.h" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1aac00fdd51ff90ac6ef6ca4d66df5f7bb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int list_is_last</definition>
        <argsstring>(list_head *list, list_head *head)</argsstring>
        <name>list_is_last</name>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>head</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="96" column="19" bodyfile="src/include/lib/list.h" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1a1535b00247bb290583d48813fc90ea59" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int list_is_empty</definition>
        <argsstring>(list_head *head)</argsstring>
        <name>list_is_empty</name>
        <param>
          <type><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref> *</type>
          <declname>head</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/lib/list.h" line="101" column="19" bodyfile="src/include/lib/list.h" bodystart="101" bodyend="104"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="types_8h" kindref="compound">common/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>clang-format<sp/>off<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>double-linked<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>TODO:<sp/>use<sp/>your<sp/>own<sp/>list<sp/>design!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="structlist__node" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlist__node" kindref="compound">list_node</ref><sp/>{</highlight></codeline>
<codeline lineno="8" refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlist__node" kindref="compound">list_node</ref><sp/>*<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>,<sp/>*<ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref>;</highlight></codeline>
<codeline lineno="9" refid="list_8h_1a865bd3b3cd44b1d8f1d63746748fa807" refkind="member"><highlight class="normal">}<sp/><ref refid="list_8h_1a865bd3b3cd44b1d8f1d63746748fa807" kindref="member">list_node_t</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structlist__node" kindref="compound">list_node_t</ref><sp/><ref refid="list_8h_1aa8e63a505e811a76625c05760bb04f7f" kindref="member">list_head</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="list_8h_1a4642d4b7df28478bb762fe43c85b5c63" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIST_HEAD_INIT(name)<sp/>{<sp/>&amp;(name),<sp/>&amp;(name)<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="list_8h_1a42f0e72af970a790b60a740af8c9ecd0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIST_HEAD(name)<sp/>\</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>list_head<sp/>name<sp/>=<sp/>LIST_HEAD_INIT(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="list_8h_1a276e8a32e0bbf024aadd9420b8f2d3b3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>offsetof(TYPE,<sp/>MEMBER)<sp/>((size_t)<sp/>&amp;((TYPE<sp/>*)0)-&gt;MEMBER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="list_8h_1af8c317a42292b61c93aae91e59118a46" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>container_of(ptr,<sp/>type,<sp/>member)<sp/>({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>typeof(<sp/>((type<sp/>*)0)-&gt;member<sp/>)<sp/>*__mptr<sp/>=<sp/>(ptr);<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(type<sp/>*)(<sp/>(char<sp/>*)__mptr<sp/>-<sp/>offsetof(type,member)<sp/>);})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="list_8h_1a26c976b7f654e70df318c1843e5094de" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>list_entry(ptr,<sp/>type,<sp/>member)<sp/>\</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>container_of(ptr,<sp/>type,<sp/>member)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_list_head(<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*list)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>list-&gt;<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref><sp/>=<sp/>list;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>list-&gt;<ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref><sp/>=<sp/>list;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>list_init_with_null(<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*list){</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>list-&gt;<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref><sp/>=<sp/><ref refid="types_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>list-&gt;<ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref><sp/>=<sp/><ref refid="types_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__list_add(<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*<ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref>,<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>-&gt;<ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref><sp/>=<sp/><ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;<ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref><sp/>=<sp/><ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref>-&gt;<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>list_add(<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/><ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*<ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>__list_add(</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/><ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>,<sp/><ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>-&gt;<ref refid="structbuf_1ab18c18abb22f07617619e9a74c71f51a" kindref="member">next</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>list_add_tail(<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/><ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*<ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>__list_add(</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/><ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>-&gt;<ref refid="structbuf_1a930cab1e1b3751795d31bfd0291dff4a" kindref="member">prev</ref>,<sp/><ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>del</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__list_del(<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*<sp/><ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref>,<sp/><ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*<sp/><ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>-&gt;<ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref><sp/>=<sp/><ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref>-&gt;<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref><sp/>=<sp/><ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__list_del_entry(<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*entry)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>__list_del(entry-&gt;<ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref>,<sp/>entry-&gt;<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>list_del(<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*entry)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>__list_del_entry(entry);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>entry-&gt;<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref><sp/>=<sp/><ref refid="types_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>entry-&gt;<ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref><sp/>=<sp/><ref refid="types_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>list_move(<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*list,<sp/><ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*<ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>__list_del_entry(list);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>list_add(list,<sp/><ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>list_move_tail(<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*list,<sp/><ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*<ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>)</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>__list_del(list-&gt;<ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref>,<sp/>list-&gt;<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>list_add_tail(list,<sp/><ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>judge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>list_is_first(<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*list,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*<ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list-&gt;<ref refid="structlist__node_1ad9553c42208805b54dc0bb58a8b20dc5" kindref="member">prev</ref><sp/>==<sp/><ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>list_is_last(<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*list,<sp/><ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*<ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>)</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list-&gt;<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref><sp/>==<sp/><ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>list_is_empty(<ref refid="structlist__node" kindref="compound">list_head</ref><sp/>*<ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>-&gt;<ref refid="structbuf_1ab18c18abb22f07617619e9a74c71f51a" kindref="member">next</ref><sp/>==<sp/><ref refid="virtio__blk_8c_1a2f3fce4bb758d0ed4c15a3ea8faac3ae" kindref="member">head</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>clang-format<sp/>on<sp/>*/</highlight></codeline>
    </programlisting>
    <location file="src/include/lib/list.h"/>
  </compounddef>
</doxygen>
