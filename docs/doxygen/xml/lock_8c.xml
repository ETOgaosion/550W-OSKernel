<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="zh">
  <compounddef id="lock_8c" kind="file" language="C++">
    <compoundname>lock.c</compoundname>
    <includes refid="atomic_8h" local="no">asm/atomic.h</includes>
    <includes refid="string_8h" local="no">lib/string.h</includes>
    <includes refid="lock_8h" local="no">os/lock.h</includes>
    <includes refid="pcb_8h" local="no">os/pcb.h</includes>
    <incdepgraph>
      <node id="1">
        <label>src/kernel/sync/lock.c</label>
        <link refid="lock_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>asm/pgtable.h</label>
        <link refid="pgtable_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>os/mm.h</label>
        <link refid="mm_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>common/elf.h</label>
        <link refid="elf_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>common/errno.h</label>
        <link refid="errno_8h"/>
      </node>
      <node id="14">
        <label>os/cpu.h</label>
        <link refid="cpu_8h"/>
      </node>
      <node id="17">
        <label>os/time.h</label>
        <link refid="time_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>asm/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>asm/context.h</label>
        <link refid="context_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>asm/sbidef.h</label>
        <link refid="sbidef_8h"/>
      </node>
      <node id="3">
        <label>common/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>lib/string.h</label>
        <link refid="string_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>asm/sbi.h</label>
        <link refid="sbi_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>os/pcb.h</label>
        <link refid="pcb_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>os/lock.h</label>
        <link refid="lock_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>os/sync.h</label>
        <link refid="sync_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>lib/list.h</label>
        <link refid="list_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="lock_8c_1a2251ba55279aef307357d4b82d7cffb7" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int first_time</definition>
        <argsstring></argsstring>
        <name>first_time</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sync/lock.c" line="6" column="5" bodyfile="src/kernel/sync/lock.c" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="lock_8c_1abd9102d240a406981d64bb584253efd3" prot="public" static="no" mutable="no">
        <type><ref refid="lock_8h_1aa810e6c5e1dcfe8ac3d0c0067028fd44" kindref="member">mutex_lock_t</ref> *</type>
        <definition>mutex_lock_t* locks[LOCK_NUM]</definition>
        <argsstring>[LOCK_NUM]</argsstring>
        <name>locks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sync/lock.c" line="7" column="14" bodyfile="src/kernel/sync/lock.c" bodystart="7" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lock_8c_1a5ecc66db27d505944136e8cb400d30f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_spin_lock_init</definition>
        <argsstring>(spin_lock_t *lock)</argsstring>
        <name>k_spin_lock_init</name>
        <param>
          <type><ref refid="lock_8h_1a78e3055bd891f045188756c613a5ad92" kindref="member">spin_lock_t</ref> *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sync/lock.c" line="9" column="6" bodyfile="src/kernel/sync/lock.c" bodystart="9" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="lock_8c_1a5785c3b6b3e98d8e2217cce184f231a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_spin_lock_try_acquire</definition>
        <argsstring>(spin_lock_t *lock)</argsstring>
        <name>k_spin_lock_try_acquire</name>
        <param>
          <type><ref refid="lock_8h_1a78e3055bd891f045188756c613a5ad92" kindref="member">spin_lock_t</ref> *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sync/lock.c" line="13" column="5" bodyfile="src/kernel/sync/lock.c" bodystart="13" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="lock_8c_1aa8b07da1c0d3b17f49429722404c9649" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_spin_lock_acquire</definition>
        <argsstring>(spin_lock_t *lock)</argsstring>
        <name>k_spin_lock_acquire</name>
        <param>
          <type><ref refid="lock_8h_1a78e3055bd891f045188756c613a5ad92" kindref="member">spin_lock_t</ref> *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sync/lock.c" line="17" column="6" bodyfile="src/kernel/sync/lock.c" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="lock_8c_1a25c026e475e11a6e312925223a3e9d34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_spin_lock_release</definition>
        <argsstring>(spin_lock_t *lock)</argsstring>
        <name>k_spin_lock_release</name>
        <param>
          <type><ref refid="lock_8h_1a78e3055bd891f045188756c613a5ad92" kindref="member">spin_lock_t</ref> *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sync/lock.c" line="22" column="6" bodyfile="src/kernel/sync/lock.c" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="lock_8c_1a8ac41ee6971967dd13fc307498edadbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_schedule_with_spin_lock</definition>
        <argsstring>(spin_lock_t *lock)</argsstring>
        <name>k_schedule_with_spin_lock</name>
        <param>
          <type><ref refid="lock_8h_1a78e3055bd891f045188756c613a5ad92" kindref="member">spin_lock_t</ref> *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sync/lock.c" line="26" column="6" bodyfile="src/kernel/sync/lock.c" bodystart="26" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="lock_8c_1a453b961abd018467d0598671b33dd2be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long k_mutex_lock_op</definition>
        <argsstring>(int *key, int op)</argsstring>
        <name>k_mutex_lock_op</name>
        <param>
          <type>int *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sync/lock.c" line="35" column="6" bodyfile="src/kernel/sync/lock.c" bodystart="35" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="lock_8c_1aaf75cfd4017b0ab981d4ff377b21e65d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int find_lock</definition>
        <argsstring>()</argsstring>
        <name>find_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sync/lock.c" line="50" column="19" bodyfile="src/kernel/sync/lock.c" bodystart="50" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="lock_8c_1aef8246c98aa26948fda792724da4c335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long k_mutex_lock_init</definition>
        <argsstring>(int *key)</argsstring>
        <name>k_mutex_lock_init</name>
        <param>
          <type>int *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sync/lock.c" line="59" column="6" bodyfile="src/kernel/sync/lock.c" bodystart="59" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="lock_8c_1a0abc3e7317b4e613540eccbec0102c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long k_mutex_lock_acquire</definition>
        <argsstring>(int key)</argsstring>
        <name>k_mutex_lock_acquire</name>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sync/lock.c" line="86" column="6" bodyfile="src/kernel/sync/lock.c" bodystart="86" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="lock_8c_1abbcb492e3aa9c973e5a75759c294de73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long k_mutex_lock_release</definition>
        <argsstring>(int key)</argsstring>
        <name>k_mutex_lock_release</name>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sync/lock.c" line="106" column="6" bodyfile="src/kernel/sync/lock.c" bodystart="106" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="lock_8c_1a3a9eb70dab785351a2d9534b58758716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long k_mutex_lock_destroy</definition>
        <argsstring>(int *key)</argsstring>
        <name>k_mutex_lock_destroy</name>
        <param>
          <type>int *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sync/lock.c" line="125" column="6" bodyfile="src/kernel/sync/lock.c" bodystart="125" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="lock_8c_1a4c088a426ea23ba9e7dd56d35acf7bec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long k_mutex_lock_trylock</definition>
        <argsstring>(int *key)</argsstring>
        <name>k_mutex_lock_trylock</name>
        <param>
          <type>int *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sync/lock.c" line="137" column="6" bodyfile="src/kernel/sync/lock.c" bodystart="137" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="lock_8c_1ac74ae2a83c4ba9388a5f5a4ab5119b45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_sleep_lock_init</definition>
        <argsstring>(sleep_lock_t *lk)</argsstring>
        <name>k_sleep_lock_init</name>
        <param>
          <type><ref refid="lock_8h_1ae07e66f4e98429770c21d2514cb97f07" kindref="member">sleep_lock_t</ref> *</type>
          <declname>lk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sync/lock.c" line="151" column="6" bodyfile="src/kernel/sync/lock.c" bodystart="151" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="lock_8c_1acd0f05a671d540e49184f27dfd6482b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_sleep_lock_acquire</definition>
        <argsstring>(sleep_lock_t *lk)</argsstring>
        <name>k_sleep_lock_acquire</name>
        <param>
          <type><ref refid="lock_8h_1ae07e66f4e98429770c21d2514cb97f07" kindref="member">sleep_lock_t</ref> *</type>
          <declname>lk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sync/lock.c" line="157" column="6" bodyfile="src/kernel/sync/lock.c" bodystart="157" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="lock_8c_1a343da8d33a6ba9c028d365d5903bec0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_sleep_lock_release</definition>
        <argsstring>(sleep_lock_t *lk)</argsstring>
        <name>k_sleep_lock_release</name>
        <param>
          <type><ref refid="lock_8h_1ae07e66f4e98429770c21d2514cb97f07" kindref="member">sleep_lock_t</ref> *</type>
          <declname>lk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sync/lock.c" line="167" column="6" bodyfile="src/kernel/sync/lock.c" bodystart="167" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="lock_8c_1a881faa3ab05a55fea4454e9c73e02bff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_sleep_lock_hold</definition>
        <argsstring>(sleep_lock_t *lk)</argsstring>
        <name>k_sleep_lock_hold</name>
        <param>
          <type><ref refid="lock_8h_1ae07e66f4e98429770c21d2514cb97f07" kindref="member">sleep_lock_t</ref> *</type>
          <declname>lk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sync/lock.c" line="175" column="5" bodyfile="src/kernel/sync/lock.c" bodystart="175" bodyend="181"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="atomic_8h" kindref="compound">asm/atomic.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="string_8h" kindref="compound">lib/string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="lock_8h" kindref="compound">os/lock.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="pcb_8h" kindref="compound">os/pcb.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1a2251ba55279aef307357d4b82d7cffb7" kindref="member">first_time</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><ref refid="structmutex__lock" kindref="compound">mutex_lock_t</ref><sp/>*<ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[<ref refid="lock_8h_1a1556069cddf96399a75f0015c8fed5fd" kindref="member">LOCK_NUM</ref>];</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1a5ecc66db27d505944136e8cb400d30f9" kindref="member">k_spin_lock_init</ref>(<ref refid="structspin__lock" kindref="compound">spin_lock_t</ref><sp/>*<ref refid="virtio__blk_8c_1a63f4138a272db1e1892f31c0f2473301" kindref="member">lock</ref>)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="virtio__blk_8c_1a63f4138a272db1e1892f31c0f2473301" kindref="member">lock</ref>-&gt;<ref refid="structspin__lock_1a6fbe412af11a7bf0be214792088dac19" kindref="member">flag</ref><sp/>=<sp/><ref refid="lock_8h_1afa2ed542fe4226abf3cc19f5f16f439fa4ade5a087dd858a01c36ce7ad8f64e36" kindref="member">UNLOCKED</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1a5785c3b6b3e98d8e2217cce184f231a7" kindref="member">k_spin_lock_try_acquire</ref>(<ref refid="structspin__lock" kindref="compound">spin_lock_t</ref><sp/>*<ref refid="virtio__blk_8c_1a63f4138a272db1e1892f31c0f2473301" kindref="member">lock</ref>)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atomic_swap_d(<ref refid="lock_8h_1afa2ed542fe4226abf3cc19f5f16f439fa6b4af979c9694e48f340397ac08dfd1c" kindref="member">LOCKED</ref>,<sp/>(<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref>)&amp;<ref refid="virtio__blk_8c_1a63f4138a272db1e1892f31c0f2473301" kindref="member">lock</ref>-&gt;<ref refid="structspin__lock_1a6fbe412af11a7bf0be214792088dac19" kindref="member">flag</ref>);</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1aa8b07da1c0d3b17f49429722404c9649" kindref="member">k_spin_lock_acquire</ref>(<ref refid="structspin__lock" kindref="compound">spin_lock_t</ref><sp/>*<ref refid="virtio__blk_8c_1a63f4138a272db1e1892f31c0f2473301" kindref="member">lock</ref>)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="lock_8c_1a5785c3b6b3e98d8e2217cce184f231a7" kindref="member">k_spin_lock_try_acquire</ref>(<ref refid="virtio__blk_8c_1a63f4138a272db1e1892f31c0f2473301" kindref="member">lock</ref>)<sp/>==<sp/><ref refid="lock_8h_1afa2ed542fe4226abf3cc19f5f16f439fa6b4af979c9694e48f340397ac08dfd1c" kindref="member">LOCKED</ref>)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1a25c026e475e11a6e312925223a3e9d34" kindref="member">k_spin_lock_release</ref>(<ref refid="structspin__lock" kindref="compound">spin_lock_t</ref><sp/>*<ref refid="virtio__blk_8c_1a63f4138a272db1e1892f31c0f2473301" kindref="member">lock</ref>)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="virtio__blk_8c_1a63f4138a272db1e1892f31c0f2473301" kindref="member">lock</ref>-&gt;<ref refid="structspin__lock_1a6fbe412af11a7bf0be214792088dac19" kindref="member">flag</ref><sp/>=<sp/><ref refid="lock_8h_1afa2ed542fe4226abf3cc19f5f16f439fa4ade5a087dd858a01c36ce7ad8f64e36" kindref="member">UNLOCKED</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1a8ac41ee6971967dd13fc307498edadbf" kindref="member">k_schedule_with_spin_lock</ref>(<ref refid="structspin__lock" kindref="compound">spin_lock_t</ref><sp/>*<ref refid="virtio__blk_8c_1a63f4138a272db1e1892f31c0f2473301" kindref="member">lock</ref>)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locked<sp/>=<sp/><ref refid="virtio__blk_8c_1a63f4138a272db1e1892f31c0f2473301" kindref="member">lock</ref>-&gt;<ref refid="structspin__lock_1a6fbe412af11a7bf0be214792088dac19" kindref="member">flag</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lock_8c_1a25c026e475e11a6e312925223a3e9d34" kindref="member">k_spin_lock_release</ref>(<ref refid="virtio__blk_8c_1a63f4138a272db1e1892f31c0f2473301" kindref="member">lock</ref>);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8h_1ab235dcbe70f00d25d99f6d0bce4ec087" kindref="member">k_pcb_scheduler</ref>();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(locked<sp/>==<sp/><ref refid="lock_8h_1afa2ed542fe4226abf3cc19f5f16f439fa6b4af979c9694e48f340397ac08dfd1c" kindref="member">LOCKED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lock_8c_1aa8b07da1c0d3b17f49429722404c9649" kindref="member">k_spin_lock_acquire</ref>(<ref refid="virtio__blk_8c_1a63f4138a272db1e1892f31c0f2473301" kindref="member">lock</ref>);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1a453b961abd018467d0598671b33dd2be" kindref="member">k_mutex_lock_op</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1aef8246c98aa26948fda792724da4c335" kindref="member">k_mutex_lock_init</ref>(key);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1a0abc3e7317b4e613540eccbec0102c86" kindref="member">k_mutex_lock_acquire</ref>(*key<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1abbcb492e3aa9c973e5a75759c294de73" kindref="member">k_mutex_lock_release</ref>(*key<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1a3a9eb70dab785351a2d9534b58758716" kindref="member">k_mutex_lock_destroy</ref>(key);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1a4c088a426ea23ba9e7dd56d35acf7bec" kindref="member">k_mutex_lock_trylock</ref>(key);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>find_lock()<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="lock_8h_1a1556069cddf96399a75f0015c8fed5fd" kindref="member">LOCK_NUM</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[i]-&gt;initialized)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1aef8246c98aa26948fda792724da4c335" kindref="member">k_mutex_lock_init</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*key)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lock_8c_1a2251ba55279aef307357d4b82d7cffb7" kindref="member">first_time</ref>)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="lock_8h_1a1556069cddf96399a75f0015c8fed5fd" kindref="member">LOCK_NUM</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[i]<sp/>=<sp/>(<ref refid="structmutex__lock" kindref="compound">mutex_lock_t</ref><sp/>*)<ref refid="mm_8h_1a00b0aa73fb7186a4c940dd83496dd199" kindref="member">k_mm_malloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmutex__lock" kindref="compound">mutex_lock_t</ref>));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[i]-&gt;<ref refid="structmutex__lock_1a9836b6e4156ff998fa18cddfbb32b3a4" kindref="member">initialized</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lock_8c_1a2251ba55279aef307357d4b82d7cffb7" kindref="member">first_time</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*key<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*key<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-3;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lock_i<sp/>=<sp/>find_lock();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lock_i<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[lock_i]-&gt;<ref refid="structmutex__lock_1a7cba1ec3d1f04d62968fb70d712043df" kindref="member">lock_id</ref><sp/>=<sp/>lock_i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[lock_i]-&gt;<ref refid="structmutex__lock_1a9836b6e4156ff998fa18cddfbb32b3a4" kindref="member">initialized</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[lock_i]-&gt;<ref refid="structmutex__lock_1a7985e924097321e2b7acce4a74c6f6cb" kindref="member">lock</ref>.<ref refid="structdouble__spin__lock_1a588192cd727e9b066252208046ade33a" kindref="member">flag</ref><sp/>=<sp/><ref refid="lock_8h_1afa2ed542fe4226abf3cc19f5f16f439fa4ade5a087dd858a01c36ce7ad8f64e36" kindref="member">UNLOCKED</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[lock_i]-&gt;<ref refid="structmutex__lock_1a7985e924097321e2b7acce4a74c6f6cb" kindref="member">lock</ref>.<ref refid="structdouble__spin__lock_1a11fe95a1c98a9d42903623234be7dce3" kindref="member">guard</ref><sp/>=<sp/><ref refid="lock_8h_1a8f729c9e224ddba4b65910a69f6258a8afbeca55fd597bdd248c70d7fc576de73" kindref="member">UNGUARDED</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>init_list_head(&amp;(<ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[lock_i]-&gt;<ref refid="pcb_8h_1a2faf8a6ddc84222929f0f6ef1a192537" kindref="member">block_queue</ref>));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>*key<sp/>=<sp/>lock_i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1a0abc3e7317b4e613540eccbec0102c86" kindref="member">k_mutex_lock_acquire</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[key]-&gt;initialized)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(atomic_cmpxchg(<ref refid="lock_8h_1a8f729c9e224ddba4b65910a69f6258a8afbeca55fd597bdd248c70d7fc576de73" kindref="member">UNGUARDED</ref>,<sp/><ref refid="lock_8h_1a8f729c9e224ddba4b65910a69f6258a8a2bd8a5d7d693356de33a89cef6c219fb" kindref="member">GUARDED</ref>,<sp/>(<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref>)<sp/>&amp;<sp/>(<ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[key]-&gt;<ref refid="virtio__blk_8c_1a63f4138a272db1e1892f31c0f2473301" kindref="member">lock</ref>.guard))<sp/>==<sp/><ref refid="lock_8h_1a8f729c9e224ddba4b65910a69f6258a8a2bd8a5d7d693356de33a89cef6c219fb" kindref="member">GUARDED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[key]-&gt;<ref refid="virtio__blk_8c_1a63f4138a272db1e1892f31c0f2473301" kindref="member">lock</ref>.<ref refid="structspin__lock_1a6fbe412af11a7bf0be214792088dac19" kindref="member">flag</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[key]-&gt;<ref refid="structmutex__lock_1a7985e924097321e2b7acce4a74c6f6cb" kindref="member">lock</ref>.<ref refid="structdouble__spin__lock_1a588192cd727e9b066252208046ade33a" kindref="member">flag</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[key]-&gt;<ref refid="structmutex__lock_1a7985e924097321e2b7acce4a74c6f6cb" kindref="member">lock</ref>.<ref refid="structdouble__spin__lock_1a11fe95a1c98a9d42903623234be7dce3" kindref="member">guard</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*current_running)-&gt;lock_ids[(*current_running)-&gt;locksum++]<sp/>=<sp/>key<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[key]-&gt;<ref refid="structmutex__lock_1a7cba1ec3d1f04d62968fb70d712043df" kindref="member">lock_id</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8h_1ae1882c01875e9da5f9fb2d3dd2b697ec" kindref="member">k_pcb_block</ref>(&amp;(*current_running)-&gt;list,<sp/>&amp;<ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[key]-&gt;<ref refid="structmutex__lock_1ab729634fbddf7b39d868fda5956e01a9" kindref="member">block_queue</ref>,<sp/><ref refid="pcb_8h_1a63b43285903b7693f45e3699209d02eaa5c6945e962fca284e243730269169d5e" kindref="member">ENQUEUE_LIST</ref>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[key]-&gt;<ref refid="structmutex__lock_1a7985e924097321e2b7acce4a74c6f6cb" kindref="member">lock</ref>.<ref refid="structdouble__spin__lock_1a11fe95a1c98a9d42903623234be7dce3" kindref="member">guard</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8h_1ab235dcbe70f00d25d99f6d0bce4ec087" kindref="member">k_pcb_scheduler</ref>();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1abbcb492e3aa9c973e5a75759c294de73" kindref="member">k_mutex_lock_release</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[key]-&gt;initialized)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*current_running)-&gt;locksum)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*current_running)-&gt;lock_ids[--(*current_running)-&gt;locksum]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(atomic_cmpxchg(<ref refid="lock_8h_1a8f729c9e224ddba4b65910a69f6258a8afbeca55fd597bdd248c70d7fc576de73" kindref="member">UNGUARDED</ref>,<sp/><ref refid="lock_8h_1a8f729c9e224ddba4b65910a69f6258a8a2bd8a5d7d693356de33a89cef6c219fb" kindref="member">GUARDED</ref>,<sp/>(<ref refid="types_8h_1a3f13e4d5a59d909d6303f569fe5e6524" kindref="member">ptr_t</ref>)<sp/>&amp;<sp/>(<ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[key]-&gt;<ref refid="virtio__blk_8c_1a63f4138a272db1e1892f31c0f2473301" kindref="member">lock</ref>.guard))<sp/>==<sp/><ref refid="lock_8h_1a8f729c9e224ddba4b65910a69f6258a8a2bd8a5d7d693356de33a89cef6c219fb" kindref="member">GUARDED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list_is_empty(&amp;<ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[key]-&gt;<ref refid="pcb_8h_1a2faf8a6ddc84222929f0f6ef1a192537" kindref="member">block_queue</ref>))<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[key]-&gt;<ref refid="structmutex__lock_1a7985e924097321e2b7acce4a74c6f6cb" kindref="member">lock</ref>.<ref refid="structdouble__spin__lock_1a588192cd727e9b066252208046ade33a" kindref="member">flag</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8h_1a0fe9ee993da3488530422db97ff3728a" kindref="member">k_pcb_unblock</ref>(<ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[key]-&gt;<ref refid="pcb_8h_1a2faf8a6ddc84222929f0f6ef1a192537" kindref="member">block_queue</ref>.<ref refid="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c" kindref="member">next</ref>,<sp/>&amp;<ref refid="pcb_8h_1a58658ee7ac1edae4ef80e87071be6b3d" kindref="member">ready_queue</ref>,<sp/><ref refid="pcb_8h_1a88409d37561d84ec48058b9f84bb3d5eae79cd7b408cb9c190ad524869ef00c14" kindref="member">UNBLOCK_TO_LIST_STRATEGY</ref>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[key]-&gt;<ref refid="structmutex__lock_1a7985e924097321e2b7acce4a74c6f6cb" kindref="member">lock</ref>.<ref refid="structdouble__spin__lock_1a11fe95a1c98a9d42903623234be7dce3" kindref="member">guard</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[key]-&gt;<ref refid="structmutex__lock_1a7cba1ec3d1f04d62968fb70d712043df" kindref="member">lock_id</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1a3a9eb70dab785351a2d9534b58758716" kindref="member">k_mutex_lock_destroy</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*key)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[*key<sp/>-<sp/>1]-&gt;initialized)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((*current_running)-&gt;locksum)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*current_running)-&gt;lock_ids[--(*current_running)-&gt;locksum]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1aaf442a6d4665859606fb0376506a349c" kindref="member">k_memset</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<ref refid="lock_8c_1abd9102d240a406981d64bb584253efd3" kindref="member">locks</ref>[*key<sp/>-<sp/>1],<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmutex__lock" kindref="compound">mutex_lock_t</ref><sp/>*));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>*key<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1a4c088a426ea23ba9e7dd56d35acf7bec" kindref="member">k_mutex_lock_trylock</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*key)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*key<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*key<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-3;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lock_i<sp/>=<sp/>find_lock();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lock_i<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1ac74ae2a83c4ba9388a5f5a4ab5119b45" kindref="member">k_sleep_lock_init</ref>(<ref refid="structsleep__lock" kindref="compound">sleep_lock_t</ref><sp/>*lk)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lock_8c_1a5ecc66db27d505944136e8cb400d30f9" kindref="member">k_spin_lock_init</ref>(&amp;lk-&gt;<ref refid="structsleep__lock_1a87badbd324a7379b500d9ff12596a3ec" kindref="member">lk</ref>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>lk-&gt;<ref refid="structsleep__lock_1a4455cfe7dfd31abb084803de5485954c" kindref="member">locked</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>lk-&gt;<ref refid="structsleep__lock_1aeacf7ed93760b3aeea07a7ab9b508726" kindref="member">pid</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1acd0f05a671d540e49184f27dfd6482b8" kindref="member">k_sleep_lock_acquire</ref>(<ref refid="structsleep__lock" kindref="compound">sleep_lock_t</ref><sp/>*lk)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lock_8c_1aa8b07da1c0d3b17f49429722404c9649" kindref="member">k_spin_lock_acquire</ref>(&amp;lk-&gt;<ref refid="structsleep__lock_1a87badbd324a7379b500d9ff12596a3ec" kindref="member">lk</ref>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(lk-&gt;<ref refid="structsleep__lock_1a4455cfe7dfd31abb084803de5485954c" kindref="member">locked</ref>)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcb_8h_1a5111ec3b899498d5951050cd72bfe21b" kindref="member">k_pcb_sleep</ref>(lk,<sp/>&amp;lk-&gt;<ref refid="structsleep__lock_1a87badbd324a7379b500d9ff12596a3ec" kindref="member">lk</ref>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>lk-&gt;<ref refid="structsleep__lock_1a4455cfe7dfd31abb084803de5485954c" kindref="member">locked</ref><sp/>=<sp/><ref refid="types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>lk-&gt;<ref refid="structsleep__lock_1aeacf7ed93760b3aeea07a7ab9b508726" kindref="member">pid</ref><sp/>=<sp/>(*current_running)-&gt;pid;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lock_8c_1a25c026e475e11a6e312925223a3e9d34" kindref="member">k_spin_lock_release</ref>(&amp;lk-&gt;<ref refid="structsleep__lock_1a87badbd324a7379b500d9ff12596a3ec" kindref="member">lk</ref>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1a343da8d33a6ba9c028d365d5903bec0c" kindref="member">k_sleep_lock_release</ref>(<ref refid="structsleep__lock" kindref="compound">sleep_lock_t</ref><sp/>*lk)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lock_8c_1aa8b07da1c0d3b17f49429722404c9649" kindref="member">k_spin_lock_acquire</ref>(&amp;lk-&gt;<ref refid="structsleep__lock_1a87badbd324a7379b500d9ff12596a3ec" kindref="member">lk</ref>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>lk-&gt;<ref refid="structsleep__lock_1a4455cfe7dfd31abb084803de5485954c" kindref="member">locked</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>lk-&gt;<ref refid="structsleep__lock_1aeacf7ed93760b3aeea07a7ab9b508726" kindref="member">pid</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8h_1a2d546871750b175deb1f3c0279c64e3f" kindref="member">k_pcb_wakeup</ref>(lk);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lock_8c_1a25c026e475e11a6e312925223a3e9d34" kindref="member">k_spin_lock_release</ref>(&amp;lk-&gt;<ref refid="structsleep__lock_1a87badbd324a7379b500d9ff12596a3ec" kindref="member">lk</ref>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lock_8c_1a881faa3ab05a55fea4454e9c73e02bff" kindref="member">k_sleep_lock_hold</ref>(<ref refid="structsleep__lock" kindref="compound">sleep_lock_t</ref><sp/>*lk)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lock_8c_1aa8b07da1c0d3b17f49429722404c9649" kindref="member">k_spin_lock_acquire</ref>(&amp;lk-&gt;<ref refid="structsleep__lock_1a87badbd324a7379b500d9ff12596a3ec" kindref="member">lk</ref>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>lk-&gt;<ref refid="structsleep__lock_1a4455cfe7dfd31abb084803de5485954c" kindref="member">locked</ref><sp/>&amp;&amp;<sp/>(lk-&gt;<ref refid="structsleep__lock_1aeacf7ed93760b3aeea07a7ab9b508726" kindref="member">pid</ref><sp/>==<sp/>(*current_running)-&gt;pid);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lock_8c_1a25c026e475e11a6e312925223a3e9d34" kindref="member">k_spin_lock_release</ref>(&amp;lk-&gt;<ref refid="structsleep__lock_1a87badbd324a7379b500d9ff12596a3ec" kindref="member">lk</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/kernel/sync/lock.c"/>
  </compounddef>
</doxygen>
